name: CI/CD Pipeline AutoGuía

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  DOTNET_VERSION: '8.0.x'
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true

jobs:
  build-and-test:
    name: Build & Test
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Para análisis de SonarCloud
    
    - name: 🛠️ Setup .NET 8
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: 📦 Restore dependencies
      run: dotnet restore AutoGuia.sln
    
    - name: 🔨 Build (Release)
      run: dotnet build AutoGuia.sln --no-restore -c Release --nologo
    
    - name: 🧪 Run unit tests with coverage
      run: |
        dotnet test AutoGuia.sln \
          --no-build \
          -c Release \
          --logger "trx;LogFileName=test-results.trx" \
          /p:CollectCoverage=true \
          /p:CoverletOutputFormat=opencover \
          /p:CoverletOutput=./coverage/ \
          /p:Exclude="[*.Tests]*"
    
    - name: 📊 Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: '**/test-results.trx'
    
    - name: 📈 Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        files: ./coverage/coverage.opencover.xml
        flags: unittests
        name: codecov-autoguia
        fail_ci_if_error: false
        verbose: true
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
    
    - name: ✅ Check coverage threshold (70%)
      run: |
        if [ -f "./coverage/coverage.opencover.xml" ]; then
          coverage=$(grep -oP 'line-rate="\K[^"]+' ./coverage/coverage.opencover.xml | head -1 || echo "0")
          coverage_percent=$(echo "$coverage * 100" | bc -l | xargs printf "%.2f")
          echo "📊 Code Coverage: $coverage_percent%"
          
          if (( $(echo "$coverage_percent < 70" | bc -l) )); then
            echo "❌ Coverage is $coverage_percent%, below 70% threshold"
            exit 1
          else
            echo "✅ Coverage is $coverage_percent%, above threshold"
          fi
        else
          echo "⚠️ Coverage file not found, skipping check"
        fi

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🛠️ Setup .NET 8
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: 📦 Restore dependencies
      run: dotnet restore AutoGuia.sln
    
    - name: 🔒 Security scan - Vulnerable packages
      run: |
        echo "🔍 Checking for vulnerable packages..."
        dotnet list package --vulnerable --include-transitive 2>&1 | tee security-scan.log
        
        if grep -q "has the following vulnerable packages" security-scan.log; then
          echo "❌ Vulnerable packages found!"
          exit 1
        else
          echo "✅ No vulnerable packages found"
        fi
    
    - name: 📅 Check for outdated packages
      run: dotnet list package --outdated
      continue-on-error: true

  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: 🛠️ Setup .NET 8
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: 📦 Cache SonarCloud packages
      uses: actions/cache@v4
      with:
        path: ~/.sonar/cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar
    
    - name: 📦 Install SonarScanner
      run: dotnet tool install --global dotnet-sonarscanner
    
    - name: 🔍 SonarCloud Analysis
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: |
        if [ -n "$SONAR_TOKEN" ]; then
          dotnet sonarscanner begin \
            /k:"PeyoBv_autoguia_blazor" \
            /o:"peyobv" \
            /d:sonar.token="${SONAR_TOKEN}" \
            /d:sonar.host.url="https://sonarcloud.io" \
            /d:sonar.cs.opencover.reportsPaths="**/coverage/coverage.opencover.xml"
          
          dotnet build AutoGuia.sln -c Release
          
          dotnet sonarscanner end /d:sonar.token="${SONAR_TOKEN}"
        else
          echo "⚠️ SONAR_TOKEN not configured, skipping SonarCloud analysis"
        fi
      continue-on-error: true

  docker-build:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [build-and-test]
    if: github.event_name == 'push'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: 🔑 Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
      if: github.ref == 'refs/heads/main'
    
    - name: 🏗️ Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: ${{ github.ref == 'refs/heads/main' }}
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/autoguia:latest
          ${{ secrets.DOCKER_USERNAME }}/autoguia:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  notify:
    name: Notify Status
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan, code-quality]
    if: always()
    
    steps:
    - name: 📢 Notification
      run: |
        if [ "${{ needs.build-and-test.result }}" == "success" ] && \
           [ "${{ needs.security-scan.result }}" == "success" ]; then
          echo "✅ All checks passed successfully!"
        else
          echo "❌ Some checks failed"
          exit 1
        fi
