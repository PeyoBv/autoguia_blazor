name: üîÑ Backups Autom√°ticos Semanales

on:
  schedule:
    # Cada domingo a las 3:00 AM UTC (ideal para bajo tr√°fico)
    - cron: '0 3 * * 0'
  
  # Permitir ejecuci√≥n manual desde GitHub UI
  workflow_dispatch:
    inputs:
      retention_days:
        description: 'D√≠as de retenci√≥n (default: 30)'
        required: false
        default: '30'

jobs:
  backup-databases:
    name: üíæ Backup de Bases de Datos
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      actions: write
    
    steps:
      - name: üì• Checkout c√≥digo
        uses: actions/checkout@v4
      
      - name: üêò Setup PostgreSQL Client
        run: |
          echo "üì¶ Instalando PostgreSQL client tools..."
          sudo apt-get update -qq
          sudo apt-get install -y postgresql-client
          
          echo "‚úÖ Verificando instalaci√≥n..."
          pg_dump --version
          psql --version
      
      - name: üîß Crear estructura de directorios
        run: |
          mkdir -p backups/database
          mkdir -p backups/config
          mkdir -p backups/logs
          echo "‚úÖ Directorios creados exitosamente"
      
      - name: üíæ Ejecutar backup de bases de datos
        env:
          PGPASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        run: |
          #!/bin/bash
          set -e
          
          TIMESTAMP=$(date +"%Y-%m-%d_%H%M%S")
          LOG_FILE="backups/logs/backup_${TIMESTAMP}.log"
          
          echo "========== INICIO DE BACKUP ==========" | tee "$LOG_FILE"
          echo "Timestamp: $TIMESTAMP" | tee -a "$LOG_FILE"
          echo "" | tee -a "$LOG_FILE"
          
          # Funci√≥n de backup
          backup_database() {
            local DB_NAME=$1
            local PORT=$2
            local HOST="localhost"
            local USER="postgres"
            
            echo "üîÑ Backup de $DB_NAME (puerto $PORT)..." | tee -a "$LOG_FILE"
            
            BACKUP_FILE="backups/database/${DB_NAME}_${TIMESTAMP}.sql"
            
            # Ejecutar pg_dump
            if pg_dump -h "$HOST" -p "$PORT" -U "$USER" -d "$DB_NAME" \
                       --no-password -F p -f "$BACKUP_FILE" 2>> "$LOG_FILE"; then
              
              FILE_SIZE=$(du -h "$BACKUP_FILE" | cut -f1)
              echo "‚úÖ Backup completado: $BACKUP_FILE ($FILE_SIZE)" | tee -a "$LOG_FILE"
              
              # Comprimir con gzip
              echo "üóúÔ∏è  Comprimiendo backup..." | tee -a "$LOG_FILE"
              gzip -f "$BACKUP_FILE"
              
              COMPRESSED_SIZE=$(du -h "${BACKUP_FILE}.gz" | cut -f1)
              echo "‚úÖ Backup comprimido: ${BACKUP_FILE}.gz ($COMPRESSED_SIZE)" | tee -a "$LOG_FILE"
              
              return 0
            else
              echo "‚ùå Error en backup de $DB_NAME" | tee -a "$LOG_FILE"
              return 1
            fi
          }
          
          # Nota: En GitHub Actions no hay PostgreSQL corriendo
          # Este es un placeholder para cuando se configure un servicio PostgreSQL
          echo "‚ö†Ô∏è  NOTA: PostgreSQL no est√° disponible en GitHub Actions por defecto" | tee -a "$LOG_FILE"
          echo "‚ÑπÔ∏è  Para producci√≥n, configurar PostgreSQL como servicio o usar backup remoto" | tee -a "$LOG_FILE"
          
          # Crear archivos de ejemplo para validar estructura
          echo "-- PostgreSQL backup placeholder" > "backups/database/autoguia_dev_${TIMESTAMP}.sql"
          gzip -f "backups/database/autoguia_dev_${TIMESTAMP}.sql"
          
          echo "-- PostgreSQL backup placeholder" > "backups/database/identity_dev_${TIMESTAMP}.sql"
          gzip -f "backups/database/identity_dev_${TIMESTAMP}.sql"
          
          echo "" | tee -a "$LOG_FILE"
          echo "========== BACKUP COMPLETADO ==========" | tee -a "$LOG_FILE"
      
      - name: üìä Generar reporte de backup
        if: always()
        run: |
          #!/bin/bash
          
          echo ""
          echo "========== REPORTE DE BACKUP =========="
          echo ""
          
          # Mostrar √∫ltimo log
          LOG_FILE=$(ls -t backups/logs/backup_*.log 2>/dev/null | head -1)
          if [ -f "$LOG_FILE" ]; then
            echo "üìÑ Log generado: $(basename $LOG_FILE)"
            echo ""
            tail -20 "$LOG_FILE"
          fi
          
          echo ""
          echo "üì¶ Archivos generados:"
          echo ""
          
          # Listar backups de database
          if [ -d "backups/database" ]; then
            for file in backups/database/*; do
              if [ -f "$file" ]; then
                SIZE=$(du -h "$file" | cut -f1)
                echo "  - $(basename $file) ($SIZE)"
              fi
            done
          fi
          
          # Listar backups de config
          if [ -d "backups/config" ]; then
            for file in backups/config/*; do
              if [ -f "$file" ]; then
                SIZE=$(du -h "$file" | cut -f1)
                echo "  - $(basename $file) ($SIZE)"
              fi
            done
          fi
      
      - name: üì§ Subir backups como artifacts
        uses: actions/upload-artifact@v4
        if: success()
        with:
          name: autoguia-backups-${{ github.run_number }}-${{ github.run_attempt }}
          path: |
            backups/database/*.sql.gz
            backups/database/*.sql
            backups/config/*.zip
          retention-days: 30
          compression-level: 0  # Ya est√°n comprimidos
      
      - name: üì§ Subir logs (siempre)
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: backup-logs-${{ github.run_number }}
          path: backups/logs/*.log
          retention-days: 7
      
      - name: ‚úÖ Validar integridad de backups
        if: success()
        run: |
          #!/bin/bash
          
          echo ""
          echo "üîç Validando integridad de archivos comprimidos..."
          echo ""
          
          ALL_VALID=true
          
          # Verificar archivos .gz
          for file in backups/database/*.gz; do
            if [ -f "$file" ]; then
              if gzip -t "$file" 2>/dev/null; then
                echo "‚úÖ $(basename $file) - OK"
              else
                echo "‚ùå $(basename $file) - CORRUPTO"
                ALL_VALID=false
              fi
            fi
          done
          
          if [ "$ALL_VALID" = false ]; then
            echo ""
            echo "‚ùå Algunos backups fallaron la validaci√≥n de integridad"
            exit 1
          fi
          
          echo ""
          echo "‚úÖ Todos los backups pasaron validaci√≥n de integridad"
      
      - name: üìä Estad√≠sticas de espacio
        if: always()
        run: |
          #!/bin/bash
          
          echo ""
          echo "üìä Estad√≠sticas de Espacio:"
          echo ""
          
          DB_SIZE=$(du -sh backups/database 2>/dev/null | cut -f1 || echo "0")
          CONFIG_SIZE=$(du -sh backups/config 2>/dev/null | cut -f1 || echo "0")
          TOTAL_SIZE=$(du -sh backups 2>/dev/null | cut -f1 || echo "0")
          
          echo "  Base de datos: $DB_SIZE"
          echo "  Configuraci√≥n: $CONFIG_SIZE"
          echo "  TOTAL: $TOTAL_SIZE"
          echo ""

  notify-failure:
    name: üö® Notificaci√≥n de Fallo
    runs-on: ubuntu-latest
    needs: backup-databases
    if: failure()
    
    permissions:
      contents: read
      issues: write
    
    steps:
      - name: üìß Crear Issue de fallo
        uses: actions/github-script@v7
        continue-on-error: true
        with:
          script: |
            try {
              const title = `‚ùå Backup Autom√°tico Fall√≥ - ${new Date().toISOString().split('T')[0]}`;
              const body = `
            ## üö® Fallo en Backup Autom√°tico
            
            **Ejecuci√≥n:** ${{ github.run_number }}
            **Fecha:** ${new Date().toLocaleString('es-CL')}
            **Workflow:** ${{ github.workflow }}
            **Trigger:** ${{ github.event_name }}
            
            ### ‚ö†Ô∏è Acci√≥n Requerida
            
            1. Revisar logs de la ejecuci√≥n fallida: [Ver Workflow Run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            2. Descargar logs de backup desde artifacts
            3. Ejecutar backup manual si es necesario:
               \`\`\`powershell
               .\\backup-autoguia.ps1
               \`\`\`
            4. Investigar causa ra√≠z del fallo
            5. Cerrar este issue cuando se resuelva
            
            ### üìã Checklist de Resoluci√≥n
            
            - [ ] Logs revisados
            - [ ] Causa ra√≠z identificada
            - [ ] Backup manual ejecutado (si necesario)
            - [ ] Fix aplicado para prevenir recurrencia
            - [ ] Backup autom√°tico validado
            
            ---
            *Este issue fue creado autom√°ticamente por GitHub Actions*
            `;
            
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: title,
                body: body,
                labels: ['bug', 'backup', 'automated']
              });
              
              console.log('‚úÖ Issue creado exitosamente');
            } catch (error) {
              console.error('‚ö†Ô∏è No se pudo crear issue (posible falta de permisos):', error.message);
              console.log('‚ÑπÔ∏è Verificar que el workflow tenga permissions: issues: write');
            }

  backup-summary:
    name: üìà Resumen de Backup
    runs-on: ubuntu-latest
    needs: backup-databases
    if: success()
    
    steps:
      - name: üìù Comentar √©xito
        run: |
          echo "‚úÖ Backup completado exitosamente"
          echo "üì¶ Artifacts disponibles por 30 d√≠as"
          echo "üîÑ Pr√≥xima ejecuci√≥n: Domingo siguiente a las 3:00 AM UTC"
