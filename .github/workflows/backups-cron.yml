name: üîÑ Backups Autom√°ticos Semanales

on:
  schedule:
    # Cada domingo a las 3:00 AM UTC (ideal para bajo tr√°fico)
    - cron: '0 3 * * 0'
  
  # Permitir ejecuci√≥n manual desde GitHub UI
  workflow_dispatch:
    inputs:
      retention_days:
        description: 'D√≠as de retenci√≥n (default: 30)'
        required: false
        default: '30'
      skip_compression:
        description: 'Omitir compresi√≥n (m√°s r√°pido)'
        type: boolean
        required: false
        default: false

jobs:
  backup-databases:
    name: üíæ Backup de Bases de Datos
    runs-on: windows-latest
    
    permissions:
      contents: read
      actions: write
    
    steps:
      - name: üì• Checkout c√≥digo
        uses: actions/checkout@v4
      
      - name: üêò Setup PostgreSQL
        run: |
          Write-Host "Instalando PostgreSQL client tools..."
          choco install postgresql16 --version=16.0 -y --no-progress
          
          # Agregar al PATH
          $env:Path += ";C:\Program Files\PostgreSQL\16\bin"
          
          # Verificar instalaci√≥n
          pg_dump --version
          psql --version
        shell: pwsh
      
      - name: üîß Crear estructura de directorios
        run: |
          New-Item -ItemType Directory -Path "backups/database" -Force | Out-Null
          New-Item -ItemType Directory -Path "backups/config" -Force | Out-Null
          New-Item -ItemType Directory -Path "backups/logs" -Force | Out-Null
          Write-Host "Directorios creados exitosamente"
        shell: pwsh
      
      - name: üíæ Ejecutar backup completo
        env:
          PGPASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        run: |
          $params = @()
          
          if ("${{ inputs.retention_days }}" -ne "") {
            $params += "-RetentionDays", "${{ inputs.retention_days }}"
          }
          
          if ("${{ inputs.skip_compression }}" -eq "true") {
            $params += "-SkipCompression"
          }
          
          Write-Host "Ejecutando backup con par√°metros: $params"
          .\backup-autoguia.ps1 @params
        shell: pwsh
      
      - name: üìä Generar reporte de backup
        if: always()
        run: |
          $logFile = Get-ChildItem .\backups\logs\backup_*.log | Sort-Object LastWriteTime -Descending | Select-Object -First 1
          
          Write-Host "`n========== REPORTE DE BACKUP ==========`n"
          
          if ($logFile) {
            Write-Host "üìÑ Log generado: $($logFile.Name)`n"
            Get-Content $logFile.FullName | Select-Object -Last 20
          }
          
          Write-Host "`nüì¶ Archivos generados:`n"
          Get-ChildItem .\backups\database -File | ForEach-Object {
            $sizeMB = [math]::Round($_.Length / 1MB, 2)
            Write-Host "  - $($_.Name) ($sizeMB MB)"
          }
          
          Get-ChildItem .\backups\config -File | ForEach-Object {
            $sizeKB = [math]::Round($_.Length / 1KB, 2)
            Write-Host "  - $($_.Name) ($sizeKB KB)"
          }
        shell: pwsh
      
      - name: üì§ Subir backups como artifacts
        uses: actions/upload-artifact@v4
        if: success()
        with:
          name: autoguia-backups-${{ github.run_number }}-${{ github.run_attempt }}
          path: |
            backups/database/*.sql.gz
            backups/database/*.sql
            backups/config/*.zip
          retention-days: 30
          compression-level: 0  # Ya est√°n comprimidos
      
      - name: üì§ Subir logs (siempre)
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: backup-logs-${{ github.run_number }}
          path: backups/logs/*.log
          retention-days: 7
      
      - name: ‚úÖ Validar integridad de backups
        if: success()
        run: |
          Write-Host "`nüîç Validando integridad de archivos comprimidos...`n"
          
          $gzFiles = Get-ChildItem .\backups\database\*.gz -ErrorAction SilentlyContinue
          
          if ($gzFiles.Count -eq 0) {
            Write-Host "‚ö†Ô∏è No se encontraron archivos .gz (posiblemente -SkipCompression activado)"
            exit 0
          }
          
          $allValid = $true
          
          foreach ($file in $gzFiles) {
            if (Get-Command "7z" -ErrorAction SilentlyContinue) {
              $testResult = & 7z t $file.FullName 2>&1
              
              if ($LASTEXITCODE -eq 0) {
                Write-Host "‚úÖ $($file.Name) - OK"
              } else {
                Write-Host "‚ùå $($file.Name) - CORRUPTO"
                $allValid = $false
              }
            } else {
              Write-Host "‚ö†Ô∏è 7-Zip no disponible, omitiendo validaci√≥n"
              break
            }
          }
          
          if (-not $allValid) {
            Write-Host "`n‚ùå Algunos backups fallaron la validaci√≥n de integridad"
            exit 1
          }
          
          Write-Host "`n‚úÖ Todos los backups pasaron validaci√≥n de integridad"
        shell: pwsh
      
      - name: üìä Estad√≠sticas de espacio
        if: always()
        run: |
          Write-Host "`nüìä Estad√≠sticas de Espacio:`n"
          
          $dbBackups = Get-ChildItem .\backups\database -File
          $configBackups = Get-ChildItem .\backups\config -File
          
          $totalDbSize = ($dbBackups | Measure-Object -Property Length -Sum).Sum
          $totalConfigSize = ($configBackups | Measure-Object -Property Length -Sum).Sum
          $totalSize = $totalDbSize + $totalConfigSize
          
          Write-Host "  Base de datos: $([math]::Round($totalDbSize / 1MB, 2)) MB"
          Write-Host "  Configuraci√≥n: $([math]::Round($totalConfigSize / 1KB, 2)) KB"
          Write-Host "  TOTAL: $([math]::Round($totalSize / 1MB, 2)) MB"
          Write-Host ""
        shell: pwsh

  notify-failure:
    name: üö® Notificaci√≥n de Fallo
    runs-on: ubuntu-latest
    needs: backup-databases
    if: failure()
    
    permissions:
      contents: read
      issues: write
    
    steps:
      - name: üìß Crear Issue de fallo
        uses: actions/github-script@v7
        continue-on-error: true
        with:
          script: |
            try {
              const title = `‚ùå Backup Autom√°tico Fall√≥ - ${new Date().toISOString().split('T')[0]}`;
              const body = `
            ## üö® Fallo en Backup Autom√°tico
            
            **Ejecuci√≥n:** ${{ github.run_number }}
            **Fecha:** ${new Date().toLocaleString('es-CL')}
            **Workflow:** ${{ github.workflow }}
            **Trigger:** ${{ github.event_name }}
            
            ### ‚ö†Ô∏è Acci√≥n Requerida
            
            1. Revisar logs de la ejecuci√≥n fallida: [Ver Workflow Run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            2. Descargar logs de backup desde artifacts
            3. Ejecutar backup manual si es necesario:
               \`\`\`powershell
               .\\backup-autoguia.ps1
               \`\`\`
            4. Investigar causa ra√≠z del fallo
            5. Cerrar este issue cuando se resuelva
            
            ### üìã Checklist de Resoluci√≥n
            
            - [ ] Logs revisados
            - [ ] Causa ra√≠z identificada
            - [ ] Backup manual ejecutado (si necesario)
            - [ ] Fix aplicado para prevenir recurrencia
            - [ ] Backup autom√°tico validado
            
            ---
            *Este issue fue creado autom√°ticamente por GitHub Actions*
            `;
            
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: title,
                body: body,
                labels: ['bug', 'backup', 'automated']
              });
              
              console.log('‚úÖ Issue creado exitosamente');
            } catch (error) {
              console.error('‚ö†Ô∏è No se pudo crear issue (posible falta de permisos):', error.message);
              console.log('‚ÑπÔ∏è Verificar que el workflow tenga permissions: issues: write');
            }

  backup-summary:
    name: üìà Resumen de Backup
    runs-on: ubuntu-latest
    needs: backup-databases
    if: success()
    
    steps:
      - name: üìù Comentar √©xito
        run: |
          echo "‚úÖ Backup completado exitosamente"
          echo "üì¶ Artifacts disponibles por 30 d√≠as"
          echo "üîÑ Pr√≥xima ejecuci√≥n: Domingo siguiente a las 3:00 AM UTC"
