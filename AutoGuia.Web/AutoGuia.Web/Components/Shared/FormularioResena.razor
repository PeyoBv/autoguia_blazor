@using AutoGuia.Core.DTOs
@using AutoGuia.Infrastructure.Services
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Forms
@inject IResenaService ResenaService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JSRuntime

<div class="formulario-resena">
    <AuthorizeView>
        <Authorized>
            @if (!usuarioYaReseno)
            {
                <div class="card">
                    <div class="card-header">
                        <h6 class="mb-0">
                            <i class="fas fa-star me-2"></i>
                            Deja tu reseña
                        </h6>
                    </div>
                    <div class="card-body">
                        <EditForm Model="nuevaResena" OnValidSubmit="EnviarResena" Context="editFormContext">
                            <DataAnnotationsValidator />
                            
                            <!-- Selección de calificación -->
                            <div class="mb-3">
                                <label class="form-label">Calificación *</label>
                                <div class="rating-selector">
                                    @for (int i = 1; i <= 5; i++)
                                    {
                                        var estrella = i;
                                        <button type="button" 
                                                class="btn btn-link p-1 rating-star @(estrella <= calificacionSeleccionada ? "selected" : "")"
                                                @onclick="() => SeleccionarCalificacion(estrella)"
                                                @onmouseover="() => HoverCalificacion(estrella)"
                                                @onmouseout="() => ResetearHover()">
                                            <i class="fas fa-star fa-lg"></i>
                                        </button>
                                    }
                                    <span class="ms-2 small text-muted">
                                        @GetTextoCalificacion(calificacionSeleccionada)
                                    </span>
                                </div>
                                <ValidationMessage For="() => nuevaResena.Calificacion" class="text-danger small" />
                            </div>

                            <!-- Comentario -->
                            <div class="mb-3">
                                <label for="comentario" class="form-label">Comentario</label>
                                <textarea id="comentario" 
                                         class="form-control" 
                                         rows="4" 
                                         placeholder="Comparte tu experiencia con este taller (opcional)..."
                                         @bind="nuevaResena.Comentario"
                                         maxlength="1000"></textarea>
                                <div class="form-text">
                                    <small>@(nuevaResena.Comentario?.Length ?? 0)/1000 caracteres</small>
                                </div>
                                <ValidationMessage For="() => nuevaResena.Comentario" class="text-danger small" />
                            </div>

                            <!-- Botones -->
                            <div class="d-flex gap-2">
                                <button type="submit" class="btn btn-primary" disabled="@enviando">
                                    @if (enviando)
                                    {
                                        <div class="spinner-border spinner-border-sm me-2" role="status"></div>
                                    }
                                    else
                                    {
                                        <i class="fas fa-paper-plane me-2"></i>
                                    }
                                    @(enviando ? "Enviando..." : "Publicar reseña")
                                </button>
                                
                                <button type="button" class="btn btn-outline-secondary" @onclick="LimpiarFormulario" disabled="@enviando">
                                    <i class="fas fa-times me-2"></i>
                                    Limpiar
                                </button>
                            </div>
                        </EditForm>
                        
                        @if (!string.IsNullOrEmpty(mensajeError))
                        {
                            <div class="alert alert-danger mt-3" role="alert">
                                <i class="fas fa-exclamation-triangle me-2"></i>
                                @mensajeError
                            </div>
                        }
                        
                        @if (!string.IsNullOrEmpty(mensajeExito))
                        {
                            <div class="alert alert-success mt-3" role="alert">
                                <i class="fas fa-check-circle me-2"></i>
                                @mensajeExito
                            </div>
                        }
                    </div>
                </div>
            }
            else
            {
                <div class="alert alert-info">
                    <i class="fas fa-info-circle me-2"></i>
                    Ya has dejado una reseña para este taller. Gracias por compartir tu experiencia.
                </div>
            }
        </Authorized>
        <NotAuthorized>
            <div class="alert alert-light border">
                <div class="text-center py-3">
                    <i class="fas fa-sign-in-alt fa-2x text-muted mb-3"></i>
                    <h6>¿Quieres dejar una reseña?</h6>
                    <p class="text-muted mb-3">Inicia sesión para compartir tu experiencia con este taller.</p>
                    <a href="/Account/Login" class="btn btn-primary">
                        <i class="fas fa-sign-in-alt me-2"></i>
                        Iniciar Sesión
                    </a>
                </div>
            </div>
        </NotAuthorized>
    </AuthorizeView>
</div>

<style>
    .rating-selector {
        display: flex;
        align-items: center;
        gap: 2px;
    }
    
    .rating-star {
        color: #dee2e6;
        text-decoration: none;
        border: none;
        background: none;
        transition: color 0.2s ease;
    }
    
    .rating-star:hover,
    .rating-star.selected {
        color: #ffc107;
    }
    
    .rating-star:focus {
        box-shadow: none;
        outline: none;
    }
</style>

@code {
    [Parameter] public int TallerId { get; set; }
    [Parameter] public EventCallback OnResenaCreada { get; set; }
    
    private CrearResenaDto nuevaResena = new();
    private bool enviando = false;
    private bool usuarioYaReseno = false;
    private string mensajeError = "";
    private string mensajeExito = "";
    private int calificacionSeleccionada = 0;
    private int calificacionHover = 0;

    protected override async Task OnInitializedAsync()
    {
        await VerificarUsuarioResena();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (TallerId > 0)
        {
            nuevaResena.TallerId = TallerId;
            await VerificarUsuarioResena();
        }
    }

    private async Task VerificarUsuarioResena()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            if (authState.User.Identity?.IsAuthenticated == true)
            {
                var usuarioId = authState.User.FindFirst("sub")?.Value ?? 
                               authState.User.FindFirst("id")?.Value ?? 
                               authState.User.Identity.Name ?? "";
                               
                if (!string.IsNullOrEmpty(usuarioId))
                {
                    usuarioYaReseno = await ResenaService.UsuarioYaResenoTallerAsync(TallerId, usuarioId);
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error verificando usuario reseña: {ex.Message}");
        }
    }

    private void SeleccionarCalificacion(int calificacion)
    {
        calificacionSeleccionada = calificacion;
        nuevaResena.Calificacion = calificacion;
        StateHasChanged();
    }

    private void HoverCalificacion(int calificacion)
    {
        calificacionHover = calificacion;
        StateHasChanged();
    }

    private void ResetearHover()
    {
        calificacionHover = 0;
        StateHasChanged();
    }

    private string GetTextoCalificacion(int calificacion) => calificacion switch
    {
        1 => "Muy malo",
        2 => "Malo", 
        3 => "Regular",
        4 => "Bueno",
        5 => "Excelente",
        _ => "Selecciona una calificación"
    };

    private async Task EnviarResena()
    {
        try
        {
            enviando = true;
            mensajeError = "";
            mensajeExito = "";
            StateHasChanged();

            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            if (authState.User.Identity?.IsAuthenticated != true)
            {
                mensajeError = "Debes iniciar sesión para dejar una reseña.";
                return;
            }

            var usuarioId = authState.User.FindFirst("sub")?.Value ?? 
                           authState.User.FindFirst("id")?.Value ?? 
                           authState.User.Identity.Name ?? "";
            
            var nombreUsuario = authState.User.FindFirst("name")?.Value ?? 
                               authState.User.Identity.Name ?? "Usuario";

            if (string.IsNullOrEmpty(usuarioId))
            {
                mensajeError = "No se pudo identificar el usuario.";
                return;
            }

            await ResenaService.CrearResenaAsync(nuevaResena, usuarioId, nombreUsuario);
            
            mensajeExito = "¡Gracias por tu reseña! Ha sido publicada exitosamente.";
            usuarioYaReseno = true;
            
            // Notificar al componente padre que se creó una nueva reseña
            await OnResenaCreada.InvokeAsync();
            
            // Limpiar el formulario
            LimpiarFormulario();
            
            // Scroll hacia arriba para mostrar el mensaje de éxito
            await JSRuntime.InvokeVoidAsync("scrollTo", 0, 0);
        }
        catch (Exception ex)
        {
            mensajeError = ex.Message.Contains("Ya has reseñado") ? 
                          ex.Message : 
                          "Ocurrió un error al enviar tu reseña. Por favor, intenta nuevamente.";
            
            Console.WriteLine($"Error enviando reseña: {ex.Message}");
        }
        finally
        {
            enviando = false;
            StateHasChanged();
        }
    }

    private void LimpiarFormulario()
    {
        nuevaResena = new CrearResenaDto { TallerId = TallerId };
        calificacionSeleccionada = 0;
        mensajeError = "";
        mensajeExito = "";
        StateHasChanged();
    }
}