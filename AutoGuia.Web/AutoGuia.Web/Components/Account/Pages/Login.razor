@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using AutoGuia.Web.Data

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Iniciar Sesión - AutoGuía</PageTitle>

<div class="login-container">
    <div class="login-card">
        <!-- Header -->
        <div class="login-header">
            <div class="logo-container">
                <i class="fas fa-car-side fa-3x text-primary"></i>
            </div>
            <h1>AutoGuía</h1>
            <p class="subtitle">Tu Asistente Automotriz Personal</p>
        </div>

        <!-- Status Message -->
        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger alert-modern" role="alert">
                <i class="fas fa-exclamation-circle me-2"></i>
                <strong>Error:</strong> @errorMessage
            </div>
        }

        <!-- Login Form -->
        <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
            <DataAnnotationsValidator />
            
            <div class="form-group">
                <label for="email" class="form-label">
                    <i class="fas fa-envelope me-2"></i>
                    Correo Electrónico
                </label>
                <InputText @bind-Value="Input.Email" 
                          class="form-control modern-input" 
                          autocomplete="username" 
                          aria-required="true" 
                          placeholder="tu@email.com" 
                          id="email" />
                <ValidationMessage For="() => Input.Email" class="text-danger small mt-1" />
            </div>

            <div class="form-group">
                <label for="password" class="form-label">
                    <i class="fas fa-lock me-2"></i>
                    Contraseña
                </label>
                <InputText type="password" 
                          @bind-Value="Input.Password" 
                          class="form-control modern-input" 
                          autocomplete="current-password" 
                          aria-required="true" 
                          placeholder="••••••••" 
                          id="password" />
                <ValidationMessage For="() => Input.Password" class="text-danger small mt-1" />
            </div>

            <div class="form-check mb-4">
                <InputCheckbox @bind-Value="Input.RememberMe" 
                              class="form-check-input" 
                              id="rememberMe" />
                <label class="form-check-label" for="rememberMe">
                    Recordarme
                </label>
            </div>

            <button type="submit" class="btn btn-primary btn-login w-100" disabled="@isLoading">
                @if (isLoading)
                {
                    <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                    <span>Iniciando sesión...</span>
                }
                else
                {
                    <i class="fas fa-sign-in-alt me-2"></i>
                    <span>Iniciar Sesión</span>
                }
            </button>
        </EditForm>

        <!-- Separator -->
        <div class="separator">
            <span>o</span>
        </div>

        <!-- External Login (Google) -->
        <div class="external-login-section">
            @if (externalLogins.Any())
            {
                <form action="Account/PerformExternalLogin" method="post">
                    <AntiforgeryToken />
                    <input type="hidden" name="ReturnUrl" value="@ReturnUrl" />
                    @foreach (var provider in externalLogins)
                    {
                        @if (provider.Name == "Google")
                        {
                            <button type="submit" name="provider" value="@provider.Name" class="btn btn-google w-100">
                                <svg class="google-icon" viewBox="0 0 24 24" width="20" height="20">
                                    <path fill="#4285F4" d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"/>
                                    <path fill="#34A853" d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"/>
                                    <path fill="#FBBC05" d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"/>
                                    <path fill="#EA4335" d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"/>
                                </svg>
                                <span>Continuar con Google</span>
                            </button>
                        }
                    }
                </form>
            }
        </div>

        <!-- Footer Links -->
        <div class="login-footer">
            <p class="text-center mb-2">
                <a href="Account/ForgotPassword" class="link-secondary">
                    <i class="fas fa-question-circle me-1"></i>
                    ¿Olvidaste tu contraseña?
                </a>
            </p>
            <p class="text-center mb-2">
                <span class="text-muted">¿No tienes una cuenta?</span>
                <a href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))" class="link-primary fw-bold ms-1">
                    Regístrate aquí
                </a>
            </p>
            <p class="text-center mb-0">
                <a href="Account/ResendEmailConfirmation" class="link-secondary small">
                    <i class="fas fa-envelope me-1"></i>
                    Reenviar confirmación de email
                </a>
            </p>
        </div>
    </div>
</div>

@code {
    private string? errorMessage;
    private bool isLoading = false;
    private AuthenticationScheme[] externalLogins = [];

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }

        // Load external authentication schemes
        externalLogins = (await SignInManager.GetExternalAuthenticationSchemesAsync()).ToArray();
    }

    public async Task LoginUser()
    {
        isLoading = true;
        errorMessage = null;

        try
        {
            // This doesn't count login failures towards account lockout
            // To enable password failures to trigger account lockout, set lockoutOnFailure: true
            var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
            
            if (result.Succeeded)
            {
                Logger.LogInformation("Usuario inició sesión correctamente: {Email}", Input.Email);
                RedirectManager.RedirectTo(ReturnUrl);
            }
            else if (result.RequiresTwoFactor)
            {
                RedirectManager.RedirectTo(
                    "Account/LoginWith2fa",
                    new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
            }
            else if (result.IsLockedOut)
            {
                Logger.LogWarning("Cuenta de usuario bloqueada: {Email}", Input.Email);
                RedirectManager.RedirectTo("Account/Lockout");
            }
            else
            {
                errorMessage = "Credenciales inválidas. Por favor, verifica tu email y contraseña.";
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error durante el inicio de sesión");
            errorMessage = "Ocurrió un error durante el inicio de sesión. Por favor, inténtalo de nuevo.";
        }
        finally
        {
            isLoading = false;
        }
    }

    private sealed class InputModel
    {
        [Required(ErrorMessage = "El correo electrónico es requerido")]
        [EmailAddress(ErrorMessage = "El formato del correo electrónico no es válido")]
        [Display(Name = "Correo Electrónico")]
        public string Email { get; set; } = "";

        [Required(ErrorMessage = "La contraseña es requerida")]
        [DataType(DataType.Password)]
        [Display(Name = "Contraseña")]
        public string Password { get; set; } = "";

        [Display(Name = "¿Recordarme?")]
        public bool RememberMe { get; set; }
    }
}
