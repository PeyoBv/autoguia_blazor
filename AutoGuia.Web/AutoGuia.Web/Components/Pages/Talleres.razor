@page "/talleres"
@rendermode InteractiveServer
@inject ITallerService TallerService
@inject IMapService MapService
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@inject IOptions<GoogleMapsOptions> GoogleMapsConfig
@using Microsoft.Extensions.Options
@using AutoGuia.Core.Services
@using AutoGuia.Web.Configuration

<PageTitle>Talleres - AutoGuía</PageTitle>

<div class="container py-4">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h1 class="h2">
                    <i class="fas fa-map-marker-alt me-2"></i>
                    Talleres Mecánicos
                </h1>
                <div class="d-flex gap-2">
                    <div class="input-group" style="width: 300px;">
                        <span class="input-group-text">
                            <i class="fas fa-search"></i>
                        </span>
                        <input type="text" class="form-control" placeholder="Buscar por ciudad..." @bind="filtrociu" @oninput="FiltrarPorCiudad">
                    </div>
                </div>
            </div>
        </div>
    </div>

    @if (cargando)
    {
        <div class="text-center py-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Cargando...</span>
            </div>
            <p class="mt-2">Cargando talleres...</p>
        </div>
    }
    else if (talleresMostrados?.Any() == true)
    {
        <div class="row">
            <div class="col-lg-8">
                <div class="row g-4">
                    @foreach (var taller in talleresMostrados)
                    {
                        <div class="col-md-6">
                            <div class="card h-100 shadow-sm border-0">
                                <div class="card-header bg-white border-bottom-0 d-flex justify-content-between align-items-start">
                                    <div>
                                        <h5 class="card-title mb-1">@taller.Nombre</h5>
                                        @if (taller.EsVerificado)
                                        {
                                            <span class="badge bg-success">
                                                <i class="fas fa-check-circle me-1"></i>Verificado
                                            </span>
                                        }
                                    </div>
                                    @if (taller.CalificacionPromedio.HasValue)
                                    {
                                        <div class="text-end">
                                            <div class="fw-bold text-warning">
                                                @for (int i = 1; i <= 5; i++)
                                                {
                                                    <i class="fas fa-star@(i <= taller.CalificacionPromedio ? "" : " text-muted opacity-25")"></i>
                                                }
                                            </div>
                                            <small class="text-muted">@taller.CalificacionPromedio.Value.ToString("0.0") (@taller.TotalResenas reseñas)</small>
                                        </div>
                                    }
                                </div>
                                <div class="card-body">
                                    @if (!string.IsNullOrEmpty(taller.Descripcion))
                                    {
                                        <p class="card-text text-muted small">@taller.Descripcion</p>
                                    }
                                    
                                    <div class="mb-2">
                                        <i class="fas fa-map-marker-alt text-primary me-2"></i>
                                        <span class="small">@taller.Direccion, @taller.Ciudad</span>
                                    </div>
                                    
                                    @if (!string.IsNullOrEmpty(taller.Telefono))
                                    {
                                        <div class="mb-2">
                                            <i class="fas fa-phone text-success me-2"></i>
                                            <span class="small">@taller.Telefono</span>
                                        </div>
                                    }
                                    
                                    @if (!string.IsNullOrEmpty(taller.HorarioAtencion))
                                    {
                                        <div class="mb-2">
                                            <i class="fas fa-clock text-info me-2"></i>
                                            <span class="small">@taller.HorarioAtencion</span>
                                        </div>
                                    }
                                    
                                    @if (!string.IsNullOrEmpty(taller.Especialidades))
                                    {
                                        <div class="mt-3">
                                            <small class="text-muted d-block mb-1">Especialidades:</small>
                                            @foreach (var especialidad in taller.Especialidades.Split(',', StringSplitOptions.RemoveEmptyEntries))
                                            {
                                                <span class="badge bg-light text-dark me-1 mb-1">@especialidad.Trim()</span>
                                            }
                                        </div>
                                    }
                                </div>
                                <div class="card-footer bg-white border-top-0">
                                    <div class="d-grid gap-2 d-md-flex justify-content-md-end">
                                        <button class="btn btn-outline-primary btn-sm" @onclick="() => VerEnMapa(taller)">
                                            <i class="fas fa-map me-1"></i>Ver en Mapa
                                        </button>
                                        <a href="/taller/@taller.Id" class="btn btn-primary btn-sm">
                                            Ver Detalles
                                        </a>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
            
            <div class="col-lg-4">
                <div class="sticky-top">
                    <div class="card shadow-sm">
                        <div class="card-header">
                            <h6 class="mb-0">
                                <i class="fas fa-map me-2"></i>
                                Mapa de Talleres
                            </h6>
                        </div>
                        <div class="card-body p-0">
                            <div id="mapa-talleres" style="height: 400px; width: 100%; position: relative;">
                                @if (errorMapa)
                                {
                                    <div class="d-flex align-items-center justify-content-center h-100 text-center text-danger">
                                        <div>
                                            <i class="fas fa-exclamation-triangle fa-2x mb-2"></i>
                                            <p class="mb-0">Error al cargar el mapa</p>
                                            <small>@mensajeError</small>
                                        </div>
                                    </div>
                                }
                                else if (!mapaInicializado)
                                {
                                    <div class="d-flex align-items-center justify-content-center h-100 text-center">
                                        <div>
                                            <div class="spinner-border text-primary" role="status"></div>
                                            <p class="mt-2 mb-0">Cargando mapa...</p>
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                    
                    <div class="card shadow-sm mt-3">
                        <div class="card-header">
                            <h6 class="mb-0">
                                <i class="fas fa-filter me-2"></i>
                                Filtros
                            </h6>
                        </div>
                        <div class="card-body">
                            <div class="mb-3">
                                <label class="form-label small">Región</label>
                                <select class="form-select form-select-sm" @bind="filtroRegion" @bind:after="AplicarFiltros">
                                    <option value="">Todas las regiones</option>
                                    @foreach (var region in regiones)
                                    {
                                        <option value="@region">@region</option>
                                    }
                                </select>
                            </div>
                            
                            <div class="mb-3">
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" @bind="soloVerificados" @bind:after="AplicarFiltros" id="soloVerificados">
                                    <label class="form-check-label small" for="soloVerificados">
                                        Solo talleres verificados
                                    </label>
                                </div>
                            </div>
                            
                            <button class="btn btn-outline-secondary btn-sm w-100" @onclick="LimpiarFiltros">
                                <i class="fas fa-times me-1"></i>
                                Limpiar filtros
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="text-center py-5">
            <i class="fas fa-search fa-3x text-muted mb-3"></i>
            <h3>No se encontraron talleres</h3>
            <p class="text-muted">Intenta ajustar tus criterios de búsqueda.</p>
        </div>
    }
</div>

@code {
    private IEnumerable<TallerDto>? talleres;
    private IEnumerable<TallerDto>? talleresMostrados;
    private bool cargando = true;
    private bool mapaInicializado = false;
    private bool errorMapa = false;
    private string mensajeError = "";
    
    private string filtrociu = "";
    private string filtroRegion = "";
    private bool soloVerificados = false;
    
    private List<string> regiones = new();

    protected override async Task OnInitializedAsync()
    {
        await CargarTalleres();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && talleres?.Any() == true)
        {
            try
            {
                // Esperar un poco más para asegurar que el DOM esté completamente renderizado
                await Task.Delay(500);
                
                // Verificar que el elemento del mapa existe antes de inicializar
                var elementoExiste = await JSRuntime.InvokeAsync<bool>("eval", 
                    "document.getElementById('mapa-talleres') !== null");
                
                if (elementoExiste)
                {
                    await InicializarMapa();
                }
                else
                {
                    errorMapa = true;
                    mensajeError = "Elemento del mapa no encontrado en el DOM";
                    StateHasChanged();
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error en OnAfterRenderAsync: {ex.Message}");
                errorMapa = true;
                mensajeError = ex.Message;
                StateHasChanged();
            }
        }
    }

    private async Task CargarTalleres()
    {
        try
        {
            talleres = await TallerService.ObtenerTalleresAsync();
            talleresMostrados = talleres;
            
            // Extraer regiones únicas para el filtro
            regiones = talleres?.Select(t => t.Region).Distinct().OrderBy(r => r).ToList() ?? new List<string>();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error cargando talleres: {ex.Message}");
        }
        finally
        {
            cargando = false;
            StateHasChanged();
        }
    }

    private async Task InicializarMapa()
    {
        try
        {
            errorMapa = false;
            mensajeError = "";
            
            var apiKey = GoogleMapsConfig.Value.ApiKey;
            if (string.IsNullOrEmpty(apiKey) || apiKey == "YOUR_GOOGLE_MAPS_API_KEY_HERE" || apiKey == "admin123")
            {
                errorMapa = true;
                mensajeError = "Clave de API de Google Maps no configurada correctamente. Por favor, configura una clave válida de Google Maps API.";
                StateHasChanged();
                return;
            }

            // Convertir DTOs a entidades para el servicio de mapa
            var talleresEntidades = talleresMostrados?.Select(dto => new Taller
            {
                Id = dto.Id,
                Nombre = dto.Nombre,
                Descripcion = dto.Descripcion,
                Direccion = dto.Direccion,
                Ciudad = dto.Ciudad,
                Region = dto.Region,
                Telefono = dto.Telefono,
                Email = dto.Email,
                Latitud = dto.Latitud,
                Longitud = dto.Longitud,
                EsVerificado = dto.EsVerificado,
                CalificacionPromedio = (decimal)(dto.CalificacionPromedio ?? 0)
            }) ?? Enumerable.Empty<Taller>();

            await MapService.InicializarMapaAsync("mapa-talleres", talleresEntidades, apiKey);
            mapaInicializado = true;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            errorMapa = true;
            mensajeError = $"Error al inicializar el mapa: {ex.Message}";
            Console.WriteLine($"Error inicializando mapa: {ex.Message}");
            StateHasChanged();
        }
    }

    private async void FiltrarPorCiudad(ChangeEventArgs e)
    {
        filtrociu = e.Value?.ToString() ?? "";
        await AplicarFiltros();
    }

    private async Task AplicarFiltros()
    {
        if (talleres == null) return;

        talleresMostrados = talleres.Where(t => 
            (string.IsNullOrEmpty(filtrociu) || t.Ciudad.Contains(filtrociu, StringComparison.OrdinalIgnoreCase)) &&
            (string.IsNullOrEmpty(filtroRegion) || t.Region == filtroRegion) &&
            (!soloVerificados || t.EsVerificado)
        );
        
        StateHasChanged();
        
        // Actualizar marcadores en el mapa si está inicializado
        if (mapaInicializado)
        {
            await ActualizarMarcadoresMapa();
        }
    }

    private async Task ActualizarMarcadoresMapa()
    {
        try
        {
            // Limpiar marcadores existentes
            await MapService.LimpiarMarcadoresAsync();
            
            // Agregar nuevos marcadores
            if (talleresMostrados?.Any() == true)
            {
                var talleresEntidades = talleresMostrados.Select(dto => new Taller
                {
                    Id = dto.Id,
                    Nombre = dto.Nombre,
                    Descripcion = dto.Descripcion,
                    Direccion = dto.Direccion,
                    Ciudad = dto.Ciudad,
                    Region = dto.Region,
                    Telefono = dto.Telefono,
                    Email = dto.Email,
                    Latitud = dto.Latitud,
                    Longitud = dto.Longitud,
                    EsVerificado = dto.EsVerificado,
                    CalificacionPromedio = (decimal)(dto.CalificacionPromedio ?? 0)
                });

                foreach (var taller in talleresEntidades)
                {
                    await MapService.AgregarMarcadorAsync(taller);
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error actualizando marcadores: {ex.Message}");
        }
    }

    private async Task LimpiarFiltros()
    {
        filtrociu = "";
        filtroRegion = "";
        soloVerificados = false;
        talleresMostrados = talleres;
        StateHasChanged();
        
        if (mapaInicializado)
        {
            await ActualizarMarcadoresMapa();
        }
    }

    private async Task VerEnMapa(TallerDto taller)
    {
        try
        {
            if (mapaInicializado && taller.Latitud.HasValue && taller.Longitud.HasValue)
            {
                await MapService.CentrarMapaAsync(taller.Latitud.Value, taller.Longitud.Value, 15);
            }
            else
            {
                Console.WriteLine($"Mapa no inicializado o coordenadas inválidas. Taller: {taller.Nombre}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error mostrando taller en mapa: {ex.Message}");
        }
    }

    private async Task VerDetalles(int tallerId)
    {
        try
        {
            Console.WriteLine($"Navegando a taller ID: {tallerId}");
            
            // Intentar con NavigationManager primero
            Navigation.NavigateTo($"/taller/{tallerId}");
            
            // Si no funciona, usar JavaScript como respaldo
            await Task.Delay(100);
            await JSRuntime.InvokeVoidAsync("console.log", $"Navegando a taller {tallerId}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error navegando a detalle de taller: {ex.Message}");
            // Respaldo con JavaScript
            await JSRuntime.InvokeVoidAsync("window.location.href", $"/taller/{tallerId}");
        }
    }


}