@page "/perfil"
@using AutoGuia.Core.Entities
@using AutoGuia.Web.DTOs
@using AutoGuia.Web.Services
@using AutoGuia.Web.Data
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.JSInterop
@using System.Security.Claims
@attribute [Authorize]
@rendermode InteractiveServer

@inject ISuscripcionService SuscripcionService
@inject AuthenticationStateProvider AuthStateProvider
@inject IJSRuntime JSRuntime
@inject ILogger<Perfil> Logger

<h3 class="mb-3">Mi Perfil</h3>

<div class="container py-4">
    @if (cargando)
    {
        <div class="text-center py-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Cargando...</span>
            </div>
            <p class="mt-3">Cargando información del perfil...</p>
        </div>
    }
    else if (usuario != null)
    {
        <!-- Datos del Usuario -->
        <div class="card mb-4 shadow-sm">
            <div class="card-body">
                <div class="row align-items-center">
                    <div class="col-auto">
                        <div class="avatar-circle bg-primary text-white">
                            <i class="fas fa-user fa-3x"></i>
                        </div>
                    </div>
                    <div class="col">
                        <h3 class="mb-1">@usuario.UserName</h3>
                        <p class="text-muted mb-1">
                            <i class="fas fa-envelope me-2"></i>@usuario.Email
                        </p>
                        <p class="text-muted mb-0">
                            <i class="fas fa-calendar-alt me-2"></i>
                            Miembro desde octubre 2024
                        </p>
                    </div>
                </div>
            </div>
        </div>

        <!-- Plan Actual -->
        @if (suscripcionActual != null)
        {
            <div class="card mb-4 shadow-sm border-@(ObtenerColorPlan(suscripcionActual.Plan.Nombre))">
                <div class="card-header bg-@(ObtenerColorPlan(suscripcionActual.Plan.Nombre)) text-white">
                    <h4 class="mb-0">
                        <i class="fas fa-star me-2"></i>
                        Tu Plan Actual
                    </h4>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-6">
                            <h5 class="text-@(ObtenerColorPlan(suscripcionActual.Plan.Nombre))">
                                Plan @suscripcionActual.Plan.Nombre
                            </h5>
                            <p class="h3 mb-3">
                                @suscripcionActual.Plan.PrecioFormateado
                                <small class="text-muted">/ @(suscripcionActual.Plan.Duracion == "Mensual" ? "mes" : "año")</small>
                            </p>
                            <p class="mb-2">
                                <i class="fas fa-calendar-check me-2 text-success"></i>
                                <strong>Vigencia:</strong> @suscripcionActual.FechaInicio.ToString("dd MMM yyyy") - @suscripcionActual.FechaVencimiento.ToString("dd MMM yyyy")
                            </p>
                            <p class="mb-2">
                                <i class="fas fa-hourglass-half me-2 text-warning"></i>
                                <strong>Días restantes:</strong> @suscripcionActual.DiasRestantes días
                            </p>
                        </div>
                        <div class="col-md-6">
                            <h6 class="mb-3">Uso del Plan:</h6>
                            
                            <!-- Diagnósticos -->
                            <div class="mb-3">
                                <div class="d-flex justify-content-between mb-1">
                                    <span>Diagnósticos con IA</span>
                                    <span class="fw-bold">
                                        @if (suscripcionActual.Plan.LimiteDiagnosticos == 0)
                                        {
                                            <text>Ilimitado</text>
                                        }
                                        else
                                        {
                                            <text>@suscripcionActual.DiagnosticosUtilizados / @suscripcionActual.Plan.LimiteDiagnosticos</text>
                                        }
                                    </span>
                                </div>
                                @if (suscripcionActual.Plan.LimiteDiagnosticos > 0)
                                {
                                    <div class="progress" style="height: 8px;">
                                        <div class="progress-bar @(suscripcionActual.LimiteDiagnosticosAlcanzado ? "bg-danger" : "bg-success")" 
                                             style="width: @CalcularPorcentaje(suscripcionActual.DiagnosticosUtilizados, suscripcionActual.Plan.LimiteDiagnosticos)%">
                                        </div>
                                    </div>
                                }
                            </div>

                            <!-- Búsquedas -->
                            <div class="mb-3">
                                <div class="d-flex justify-content-between mb-1">
                                    <span>Búsquedas diarias</span>
                                    <span class="fw-bold">
                                        @if (suscripcionActual.Plan.LimiteBusquedas == 0)
                                        {
                                            <text>Ilimitado</text>
                                        }
                                        else
                                        {
                                            <text>@suscripcionActual.BusquedasUtilizadas / @suscripcionActual.Plan.LimiteBusquedas</text>
                                        }
                                    </span>
                                </div>
                                @if (suscripcionActual.Plan.LimiteBusquedas > 0)
                                {
                                    <div class="progress" style="height: 8px;">
                                        <div class="progress-bar @(suscripcionActual.LimiteBusquedasAlcanzado ? "bg-danger" : "bg-info")" 
                                             style="width: @CalcularPorcentaje(suscripcionActual.BusquedasUtilizadas, suscripcionActual.Plan.LimiteBusquedas)%">
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>

                    <hr />

                    <div class="d-flex gap-2">
                        <button class="btn btn-outline-primary" @onclick="MostrarModalCambiarPlan">
                            <i class="fas fa-exchange-alt me-2"></i>Cambiar Plan
                        </button>
                        <button class="btn btn-outline-danger" @onclick="CancelarSuscripcionConfirmar">
                            <i class="fas fa-times-circle me-2"></i>Cancelar Suscripción
                        </button>
                    </div>
                </div>
            </div>
        }
        else
        {
            <div class="alert alert-warning">
                <i class="fas fa-exclamation-triangle me-2"></i>
                No tienes una suscripción activa. ¡Selecciona un plan para comenzar!
            </div>
        }

        <!-- Planes Disponibles -->
        <h4 class="mb-4">
            <i class="fas fa-layer-group me-2"></i>
            Planes Disponibles
        </h4>

        <div class="row g-4 mb-5">
            @foreach (var plan in planesDisponibles)
            {
                var esActual = suscripcionActual?.PlanId == plan.Id;
                var colorClase = ObtenerColorPlan(plan.Nombre);

                <div class="col-md-4">
                    <div class="card h-100 shadow-sm @(plan.Destacado ? $"border-{colorClase} border-3" : "")">
                        @if (plan.Destacado)
                        {
                            <div class="position-absolute top-0 start-50 translate-middle">
                                <span class="badge bg-@colorClase">
                                    <i class="fas fa-crown me-1"></i>Recomendado
                                </span>
                            </div>
                        }
                        
                        <div class="card-header text-center @(plan.Destacado ? $"bg-{colorClase} text-white" : "")">
                            <h5 class="mb-0">@plan.Nombre</h5>
                        </div>
                        
                        <div class="card-body text-center">
                            <div class="precio mb-3">
                                <h2 class="text-@colorClase mb-0">@plan.PrecioFormateado</h2>
                                <small class="text-muted">/ @(plan.Duracion == "Mensual" ? "mes" : "año")</small>
                            </div>

                            <p class="text-muted small">@plan.Descripcion</p>

                            <hr />

                            <ul class="list-unstyled text-start">
                                @if (plan.Caracteristicas != null)
                                {
                                    @foreach (var caracteristica in plan.Caracteristicas)
                                    {
                                        <li class="mb-2">
                                            <i class="fas fa-check-circle text-success me-2"></i>
                                            @caracteristica
                                        </li>
                                    }
                                }
                            </ul>

                            <hr />

                            <div class="small text-muted text-start">
                                <p class="mb-1">
                                    <i class="fas fa-brain me-2"></i>
                                    <strong>Diagnósticos:</strong> 
                                    @(plan.LimiteDiagnosticos == 0 ? "Ilimitado" : $"{plan.LimiteDiagnosticos}/mes")
                                </p>
                                <p class="mb-0">
                                    <i class="fas fa-search me-2"></i>
                                    <strong>Búsquedas:</strong> 
                                    @(plan.LimiteBusquedas == 0 ? "Ilimitado" : $"{plan.LimiteBusquedas}/día")
                                </p>
                            </div>
                        </div>
                        
                        <div class="card-footer text-center">
                            @if (esActual)
                            {
                                <button class="btn btn-secondary w-100" disabled>
                                    <i class="fas fa-check me-2"></i>Plan Actual
                                </button>
                            }
                            else
                            {
                                <button class="btn btn-@colorClase w-100" 
                                        @onclick="() => SeleccionarPlan(plan)">
                                    <i class="fas fa-arrow-right me-2"></i>
                                    @(suscripcionActual != null ? "Cambiar a este plan" : "Seleccionar")
                                </button>
                            }
                        </div>
                    </div>
                </div>
            }
        </div>

        <!-- Modal de Confirmación -->
        @if (mostrarModal && planSeleccionado != null)
        {
            <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
                <div class="modal-dialog modal-dialog-centered">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">
                                <i class="fas fa-exchange-alt me-2"></i>
                                Confirmar Cambio de Plan
                            </h5>
                            <button type="button" class="btn-close" @onclick="CerrarModal"></button>
                        </div>
                        <div class="modal-body">
                            @if (suscripcionActual != null)
                            {
                                <p>Estás a punto de cambiar de plan:</p>
                                <div class="alert alert-info">
                                    <strong>Plan actual:</strong> @suscripcionActual.Plan.Nombre (@suscripcionActual.Plan.PrecioFormateado)<br />
                                    <strong>Nuevo plan:</strong> @planSeleccionado.Nombre (@planSeleccionado.PrecioFormateado)
                                </div>
                                <p class="small text-muted">
                                    <i class="fas fa-info-circle me-1"></i>
                                    Tu plan actual será cancelado y se creará una nueva suscripción. 
                                    Los contadores de uso se resetearán.
                                </p>
                            }
                            else
                            {
                                <p>Vas a suscribirte al plan:</p>
                                <div class="alert alert-success">
                                    <strong>Plan:</strong> @planSeleccionado.Nombre<br />
                                    <strong>Precio:</strong> @planSeleccionado.PrecioFormateado<br />
                                    <strong>Duración:</strong> @planSeleccionado.Duracion
                                </div>
                            }

                            @if (!string.IsNullOrEmpty(mensajeError))
                            {
                                <div class="alert alert-danger">
                                    <i class="fas fa-exclamation-triangle me-2"></i>
                                    @mensajeError
                                </div>
                            }
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" @onclick="CerrarModal" disabled="@procesando">
                                Cancelar
                            </button>
                            <button type="button" class="btn btn-primary" @onclick="ConfirmarCambioPlan" disabled="@procesando">
                                @if (procesando)
                                {
                                    <span class="spinner-border spinner-border-sm me-2"></span>
                                }
                                <i class="fas fa-check me-2"></i>
                                Confirmar
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        }

        <!-- Toast de Notificación -->
        @if (!string.IsNullOrEmpty(mensajeToast))
        {
            <div class="position-fixed bottom-0 end-0 p-3" style="z-index: 11">
                <div class="toast show" role="alert">
                    <div class="toast-header bg-@(tipoToast) text-white">
                        <i class="fas fa-@(tipoToast == "success" ? "check-circle" : "exclamation-triangle") me-2"></i>
                        <strong class="me-auto">@(tipoToast == "success" ? "Éxito" : "Error")</strong>
                        <button type="button" class="btn-close btn-close-white" @onclick="CerrarToast"></button>
                    </div>
                    <div class="toast-body">
                        @mensajeToast
                    </div>
                </div>
            </div>
        }
    }
</div>

@code {
    private ApplicationUser? usuario;
    private SuscripcionDto? suscripcionActual;
    private List<PlanDto> planesDisponibles = new();
    private bool cargando = true;
    private bool mostrarModal = false;
    private bool procesando = false;
    private PlanDto? planSeleccionado;
    private string? mensajeError;
    private string? mensajeToast;
    private string tipoToast = "success";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await CargarDatosUsuario();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error al inicializar componente de perfil");
            mensajeError = "Error al cargar información del perfil";
        }
        finally
        {
            cargando = false;
        }
    }

    private async Task CargarDatosUsuario()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated == true)
        {
            var userId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
            var userName = user.Identity.Name;
            var email = user.FindFirst(ClaimTypes.Email)?.Value;

            if (userId != null)
            {
                usuario = new ApplicationUser
                {
                    Id = userId,
                    UserName = userName,
                    Email = email
                };

                suscripcionActual = await SuscripcionService.ObtenerSuscripcionActualAsync(userId);
                planesDisponibles = (await SuscripcionService.ObtenerPlanesAsync()).ToList();

                Logger.LogInformation("Datos de usuario cargados: {UserId}, Suscripción: {Tiene}", 
                    userId, suscripcionActual != null);
            }
        }
    }

    private void SeleccionarPlan(PlanDto plan)
    {
        planSeleccionado = plan;
        mostrarModal = true;
        mensajeError = null;
    }

    private void MostrarModalCambiarPlan()
    {
        mostrarModal = true;
        mensajeError = null;
    }

    private void CerrarModal()
    {
        mostrarModal = false;
        planSeleccionado = null;
        mensajeError = null;
    }

    private async Task ConfirmarCambioPlan()
    {
        if (planSeleccionado == null || usuario == null)
            return;

        procesando = true;
        mensajeError = null;

        try
        {
            if (suscripcionActual != null)
            {
                // Cambiar plan existente
                await SuscripcionService.CambiarPlanAsync(usuario.Id, planSeleccionado.Id, "Manual", null);
                MostrarToast($"Plan cambiado exitosamente a {planSeleccionado.Nombre}", "success");
            }
            else
            {
                // Crear nueva suscripción
                await SuscripcionService.CrearSuscripcionAsync(usuario.Id, planSeleccionado.Id, "Manual", null, planSeleccionado.Precio);
                MostrarToast($"Suscripción creada exitosamente al plan {planSeleccionado.Nombre}", "success");
            }

            // Recargar datos
            await CargarDatosUsuario();
            CerrarModal();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error al cambiar plan");
            mensajeError = "Error al procesar el cambio de plan. Inténtalo de nuevo.";
            MostrarToast("Error al cambiar plan", "danger");
        }
        finally
        {
            procesando = false;
        }
    }

    private async Task CancelarSuscripcionConfirmar()
    {
        if (usuario == null || suscripcionActual == null)
            return;

        if (!await JSRuntime.InvokeAsync<bool>("confirm", "¿Estás seguro de cancelar tu suscripción?"))
            return;

        try
        {
            var cancelado = await SuscripcionService.CancelarSuscripcionAsync(usuario.Id, "Cancelación solicitada por el usuario");
            
            if (cancelado)
            {
                MostrarToast("Suscripción cancelada exitosamente", "success");
                await CargarDatosUsuario();
            }
            else
            {
                MostrarToast("No se pudo cancelar la suscripción", "danger");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error al cancelar suscripción");
            MostrarToast("Error al cancelar suscripción", "danger");
        }
    }

    private void MostrarToast(string mensaje, string tipo)
    {
        mensajeToast = mensaje;
        tipoToast = tipo;
        StateHasChanged();

        // Auto-cerrar después de 5 segundos
        Task.Delay(5000).ContinueWith(_ => CerrarToast());
    }

    private void CerrarToast()
    {
        mensajeToast = null;
        StateHasChanged();
    }

    private string ObtenerColorPlan(string nombrePlan)
    {
        return nombrePlan.ToLower() switch
        {
            var n when n.Contains("gratis") => "secondary",
            var n when n.Contains("pro") => "primary",
            var n when n.Contains("premium") => "warning",
            _ => "info"
        };
    }

    private double CalcularPorcentaje(int usado, int total)
    {
        if (total == 0) return 0;
        return Math.Min((double)usado / total * 100, 100);
    }
}
