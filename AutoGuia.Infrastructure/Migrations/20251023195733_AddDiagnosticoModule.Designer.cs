// <auto-generated />
using System;
using AutoGuia.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AutoGuia.Infrastructure.Migrations
{
    [DbContext(typeof(AutoGuiaDbContext))]
    [Migration("20251023195733_AddDiagnosticoModule")]
    partial class AddDiagnosticoModule
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AutoGuia.Core.Entities.Categoria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Descripcion")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("EsActivo")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("IconUrl")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Categorias");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Descripcion = "Aceites para motor, transmisión y diferencial",
                            EsActivo = true,
                            FechaCreacion = new DateTime(2025, 10, 23, 19, 57, 32, 244, DateTimeKind.Utc).AddTicks(6501),
                            IconUrl = "/icons/aceites.svg",
                            Nombre = "Aceites"
                        },
                        new
                        {
                            Id = 2,
                            Descripcion = "Neumáticos para todo tipo de vehículos",
                            EsActivo = true,
                            FechaCreacion = new DateTime(2025, 10, 23, 19, 57, 32, 244, DateTimeKind.Utc).AddTicks(6503),
                            IconUrl = "/icons/neumaticos.svg",
                            Nombre = "Neumáticos"
                        },
                        new
                        {
                            Id = 3,
                            Descripcion = "Plumillas limpiaparabrisas",
                            EsActivo = true,
                            FechaCreacion = new DateTime(2025, 10, 23, 19, 57, 32, 244, DateTimeKind.Utc).AddTicks(6505),
                            IconUrl = "/icons/plumillas.svg",
                            Nombre = "Plumillas"
                        },
                        new
                        {
                            Id = 4,
                            Descripcion = "Filtros de aire, aceite, combustible y cabina",
                            EsActivo = true,
                            FechaCreacion = new DateTime(2025, 10, 23, 19, 57, 32, 244, DateTimeKind.Utc).AddTicks(6507),
                            IconUrl = "/icons/filtros.svg",
                            Nombre = "Filtros"
                        },
                        new
                        {
                            Id = 5,
                            Descripcion = "Radios multimedia para automóviles",
                            EsActivo = true,
                            FechaCreacion = new DateTime(2025, 10, 23, 19, 57, 32, 244, DateTimeKind.Utc).AddTicks(6509),
                            IconUrl = "/icons/radios.svg",
                            Nombre = "Radios"
                        },
                        new
                        {
                            Id = 6,
                            Descripcion = "Accesorios y gadgets automotrices",
                            EsActivo = true,
                            FechaCreacion = new DateTime(2025, 10, 23, 19, 57, 32, 244, DateTimeKind.Utc).AddTicks(6511),
                            IconUrl = "/icons/gadgets.svg",
                            Nombre = "Gadgets"
                        });
                });

            modelBuilder.Entity("AutoGuia.Core.Entities.CausaPosible", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("descripcion");

                    b.Property<string>("DescripcionDetallada")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("descripcion_detallada");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_creacion");

                    b.Property<int>("NivelProbabilidad")
                        .HasColumnType("integer")
                        .HasColumnName("nivel_probabilidad");

                    b.Property<bool>("RequiereServicioProfesional")
                        .HasColumnType("boolean")
                        .HasColumnName("requiere_servicio_profesional");

                    b.Property<int>("SintomaId")
                        .HasColumnType("integer")
                        .HasColumnName("sintoma_id");

                    b.HasKey("Id");

                    b.HasIndex("SintomaId");

                    b.ToTable("causas_posibles", "diagnostico");
                });

            modelBuilder.Entity("AutoGuia.Core.Entities.ConsultaDiagnostico", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("FechaConsulta")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_consulta");

                    b.Property<bool>("FueUtil")
                        .HasColumnType("boolean")
                        .HasColumnName("fue_util");

                    b.Property<string>("RespuestaAsistente")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("respuesta_asistente");

                    b.Property<string>("SintomaDescrito")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("sintoma_descrito");

                    b.Property<int?>("SintomaRelacionadoId")
                        .HasColumnType("integer")
                        .HasColumnName("sintoma_relacionado_id");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("integer")
                        .HasColumnName("usuario_id");

                    b.HasKey("Id");

                    b.HasIndex("SintomaRelacionadoId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("consultas_diagnostico", "diagnostico");
                });

            modelBuilder.Entity("AutoGuia.Core.Entities.Marca", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Descripcion")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<bool>("EsActivo")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LogoUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Marcas");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EsActivo = true,
                            FechaCreacion = new DateTime(2025, 10, 23, 19, 57, 32, 244, DateTimeKind.Utc).AddTicks(6132),
                            LogoUrl = "/images/marcas/toyota.png",
                            Nombre = "Toyota"
                        },
                        new
                        {
                            Id = 2,
                            EsActivo = true,
                            FechaCreacion = new DateTime(2025, 10, 23, 19, 57, 32, 244, DateTimeKind.Utc).AddTicks(6139),
                            LogoUrl = "/images/marcas/honda.png",
                            Nombre = "Honda"
                        },
                        new
                        {
                            Id = 3,
                            EsActivo = true,
                            FechaCreacion = new DateTime(2025, 10, 23, 19, 57, 32, 244, DateTimeKind.Utc).AddTicks(6141),
                            LogoUrl = "/images/marcas/nissan.png",
                            Nombre = "Nissan"
                        },
                        new
                        {
                            Id = 4,
                            EsActivo = true,
                            FechaCreacion = new DateTime(2025, 10, 23, 19, 57, 32, 244, DateTimeKind.Utc).AddTicks(6211),
                            LogoUrl = "/images/marcas/chevrolet.png",
                            Nombre = "Chevrolet"
                        },
                        new
                        {
                            Id = 5,
                            EsActivo = true,
                            FechaCreacion = new DateTime(2025, 10, 23, 19, 57, 32, 244, DateTimeKind.Utc).AddTicks(6213),
                            LogoUrl = "/images/marcas/ford.png",
                            Nombre = "Ford"
                        });
                });

            modelBuilder.Entity("AutoGuia.Core.Entities.Modelo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AnioFinProduccion")
                        .HasColumnType("integer");

                    b.Property<int?>("AnioInicioProduccion")
                        .HasColumnType("integer");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<bool>("EsActivo")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ImagenUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("MarcaId")
                        .HasColumnType("integer");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("MarcaId");

                    b.ToTable("Modelos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AnioFinProduccion = 2024,
                            AnioInicioProduccion = 2000,
                            EsActivo = true,
                            FechaCreacion = new DateTime(2025, 10, 23, 19, 57, 32, 244, DateTimeKind.Utc).AddTicks(6444),
                            MarcaId = 1,
                            Nombre = "Corolla"
                        },
                        new
                        {
                            Id = 2,
                            AnioFinProduccion = 2024,
                            AnioInicioProduccion = 2005,
                            EsActivo = true,
                            FechaCreacion = new DateTime(2025, 10, 23, 19, 57, 32, 244, DateTimeKind.Utc).AddTicks(6448),
                            MarcaId = 1,
                            Nombre = "Yaris"
                        },
                        new
                        {
                            Id = 3,
                            AnioFinProduccion = 2024,
                            AnioInicioProduccion = 2010,
                            EsActivo = true,
                            FechaCreacion = new DateTime(2025, 10, 23, 19, 57, 32, 244, DateTimeKind.Utc).AddTicks(6449),
                            MarcaId = 1,
                            Nombre = "RAV4"
                        },
                        new
                        {
                            Id = 4,
                            AnioFinProduccion = 2024,
                            AnioInicioProduccion = 2000,
                            EsActivo = true,
                            FechaCreacion = new DateTime(2025, 10, 23, 19, 57, 32, 244, DateTimeKind.Utc).AddTicks(6451),
                            MarcaId = 2,
                            Nombre = "Civic"
                        },
                        new
                        {
                            Id = 5,
                            AnioFinProduccion = 2024,
                            AnioInicioProduccion = 2008,
                            EsActivo = true,
                            FechaCreacion = new DateTime(2025, 10, 23, 19, 57, 32, 244, DateTimeKind.Utc).AddTicks(6452),
                            MarcaId = 2,
                            Nombre = "Accord"
                        },
                        new
                        {
                            Id = 6,
                            AnioFinProduccion = 2024,
                            AnioInicioProduccion = 2012,
                            EsActivo = true,
                            FechaCreacion = new DateTime(2025, 10, 23, 19, 57, 32, 244, DateTimeKind.Utc).AddTicks(6454),
                            MarcaId = 2,
                            Nombre = "CR-V"
                        },
                        new
                        {
                            Id = 7,
                            AnioFinProduccion = 2024,
                            AnioInicioProduccion = 2007,
                            EsActivo = true,
                            FechaCreacion = new DateTime(2025, 10, 23, 19, 57, 32, 244, DateTimeKind.Utc).AddTicks(6455),
                            MarcaId = 3,
                            Nombre = "Sentra"
                        },
                        new
                        {
                            Id = 8,
                            AnioFinProduccion = 2024,
                            AnioInicioProduccion = 2012,
                            EsActivo = true,
                            FechaCreacion = new DateTime(2025, 10, 23, 19, 57, 32, 244, DateTimeKind.Utc).AddTicks(6457),
                            MarcaId = 3,
                            Nombre = "Versa"
                        },
                        new
                        {
                            Id = 9,
                            AnioFinProduccion = 2024,
                            AnioInicioProduccion = 2014,
                            EsActivo = true,
                            FechaCreacion = new DateTime(2025, 10, 23, 19, 57, 32, 244, DateTimeKind.Utc).AddTicks(6458),
                            MarcaId = 3,
                            Nombre = "X-Trail"
                        });
                });

            modelBuilder.Entity("AutoGuia.Core.Entities.Oferta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("EsActivo")
                        .HasColumnType("boolean");

                    b.Property<bool>("EsDisponible")
                        .HasColumnType("boolean");

                    b.Property<bool>("EsOferta")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("FechaActualizacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("Precio")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal?>("PrecioAnterior")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("ProductoId")
                        .HasColumnType("integer");

                    b.Property<string>("SKU")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("TiendaId")
                        .HasColumnType("integer");

                    b.Property<string>("UrlProductoEnTienda")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.HasKey("Id");

                    b.HasIndex("ProductoId");

                    b.HasIndex("TiendaId");

                    b.ToTable("Ofertas");
                });

            modelBuilder.Entity("AutoGuia.Core.Entities.PasoVerificacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CausaPosibleId")
                        .HasColumnType("integer")
                        .HasColumnName("causa_posible_id");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("descripcion");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_creacion");

                    b.Property<string>("IndicadoresExito")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("indicadores_exito");

                    b.Property<string>("InstruccionesDetalladas")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("instrucciones_detalladas");

                    b.Property<int>("Orden")
                        .HasColumnType("integer")
                        .HasColumnName("orden");

                    b.HasKey("Id");

                    b.HasIndex("CausaPosibleId");

                    b.ToTable("pasos_verificacion", "diagnostico");
                });

            modelBuilder.Entity("AutoGuia.Core.Entities.Producto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("CalificacionPromedio")
                        .HasColumnType("decimal(3,2)");

                    b.Property<int>("CategoriaId")
                        .HasColumnType("integer");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<bool>("EsActivo")
                        .HasColumnType("boolean");

                    b.Property<string>("Especificaciones")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<DateTime>("FechaActualizacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FiltroValor1")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("FiltroValor2")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("FiltroValor3")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ImagenUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Marca")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("NumeroDeParte")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("TotalResenas")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CategoriaId");

                    b.ToTable("Productos");
                });

            modelBuilder.Entity("AutoGuia.Core.Entities.ProductoVehiculoCompatible", b =>
                {
                    b.Property<int>("ProductoId")
                        .HasColumnType("integer");

                    b.Property<int>("ModeloId")
                        .HasColumnType("integer");

                    b.Property<int>("Ano")
                        .HasColumnType("integer");

                    b.Property<bool>("EsActivo")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NotasCompatibilidad")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("ProductoId", "ModeloId", "Ano");

                    b.HasIndex("ModeloId");

                    b.ToTable("ProductoVehiculoCompatibles");
                });

            modelBuilder.Entity("AutoGuia.Core.Entities.PublicacionForo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Categoria")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Contenido")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("character varying(5000)");

                    b.Property<bool>("EsActivo")
                        .HasColumnType("boolean");

                    b.Property<bool>("EsCerrado")
                        .HasColumnType("boolean");

                    b.Property<bool>("EsDestacado")
                        .HasColumnType("boolean");

                    b.Property<string>("Etiquetas")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime?>("FechaActualizacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Likes")
                        .HasColumnType("integer");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("integer");

                    b.Property<int>("Vistas")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("PublicacionesForo");
                });

            modelBuilder.Entity("AutoGuia.Core.Entities.RecomendacionPreventiva", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CausaPosibleId")
                        .HasColumnType("integer")
                        .HasColumnName("causa_posible_id");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("descripcion");

                    b.Property<string>("Detalle")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("detalle");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_creacion");

                    b.Property<int>("FrecuenciaKilometros")
                        .HasColumnType("integer")
                        .HasColumnName("frecuencia_kilometros");

                    b.Property<int>("FrecuenciaMeses")
                        .HasColumnType("integer")
                        .HasColumnName("frecuencia_meses");

                    b.HasKey("Id");

                    b.HasIndex("CausaPosibleId");

                    b.ToTable("recomendaciones_preventivas", "diagnostico");
                });

            modelBuilder.Entity("AutoGuia.Core.Entities.Resena", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Calificacion")
                        .HasColumnType("integer");

                    b.Property<string>("Comentario")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime>("FechaPublicacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NombreUsuario")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TallerId")
                        .HasColumnType("integer");

                    b.Property<string>("UsuarioId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("TallerId");

                    b.ToTable("Resena");
                });

            modelBuilder.Entity("AutoGuia.Core.Entities.ResenasTaller", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Calificacion")
                        .HasColumnType("integer");

                    b.Property<string>("Comentario")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<bool>("EsActivo")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("TallerId")
                        .HasColumnType("integer");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TallerId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("ResenasTaller");
                });

            modelBuilder.Entity("AutoGuia.Core.Entities.RespuestaForo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Contenido")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<bool>("EsActivo")
                        .HasColumnType("boolean");

                    b.Property<bool>("EsRespuestaAceptada")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("FechaActualizacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Likes")
                        .HasColumnType("integer");

                    b.Property<int>("PublicacionId")
                        .HasColumnType("integer");

                    b.Property<int?>("RespuestaPadreId")
                        .HasColumnType("integer");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PublicacionId");

                    b.HasIndex("RespuestaPadreId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("RespuestasForo");
                });

            modelBuilder.Entity("AutoGuia.Core.Entities.Sintoma", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("descripcion");

                    b.Property<string>("DescripcionTecnica")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("descripcion_tecnica");

                    b.Property<bool>("EsActivo")
                        .HasColumnType("boolean")
                        .HasColumnName("es_activo");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_creacion");

                    b.Property<int>("NivelUrgencia")
                        .HasColumnType("integer")
                        .HasColumnName("nivel_urgencia");

                    b.Property<int>("SistemaAutomotrizId")
                        .HasColumnType("integer")
                        .HasColumnName("sistema_automotriz_id");

                    b.HasKey("Id");

                    b.HasIndex("SistemaAutomotrizId");

                    b.ToTable("sintomas", "diagnostico");
                });

            modelBuilder.Entity("AutoGuia.Core.Entities.SistemaAutomotriz", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("descripcion");

                    b.Property<bool>("EsActivo")
                        .HasColumnType("boolean")
                        .HasColumnName("es_activo");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_creacion");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("nombre");

                    b.HasKey("Id");

                    b.ToTable("sistemas_automotrices", "diagnostico");
                });

            modelBuilder.Entity("AutoGuia.Core.Entities.Subcategoria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoriaId")
                        .HasColumnType("integer");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("CategoriaId");

                    b.ToTable("Subcategorias");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoriaId = 1,
                            Nombre = "Tipo"
                        },
                        new
                        {
                            Id = 2,
                            CategoriaId = 1,
                            Nombre = "Viscosidad"
                        },
                        new
                        {
                            Id = 3,
                            CategoriaId = 1,
                            Nombre = "Marca"
                        },
                        new
                        {
                            Id = 4,
                            CategoriaId = 2,
                            Nombre = "Tipo"
                        },
                        new
                        {
                            Id = 5,
                            CategoriaId = 2,
                            Nombre = "Tamaño"
                        },
                        new
                        {
                            Id = 6,
                            CategoriaId = 2,
                            Nombre = "Marca"
                        },
                        new
                        {
                            Id = 7,
                            CategoriaId = 3,
                            Nombre = "Tamaño"
                        },
                        new
                        {
                            Id = 8,
                            CategoriaId = 3,
                            Nombre = "Tipo"
                        },
                        new
                        {
                            Id = 9,
                            CategoriaId = 3,
                            Nombre = "Marca"
                        },
                        new
                        {
                            Id = 10,
                            CategoriaId = 4,
                            Nombre = "Tipo"
                        },
                        new
                        {
                            Id = 11,
                            CategoriaId = 4,
                            Nombre = "Marca"
                        },
                        new
                        {
                            Id = 12,
                            CategoriaId = 5,
                            Nombre = "Características"
                        },
                        new
                        {
                            Id = 13,
                            CategoriaId = 5,
                            Nombre = "Marca"
                        },
                        new
                        {
                            Id = 14,
                            CategoriaId = 6,
                            Nombre = "Tipo"
                        },
                        new
                        {
                            Id = 15,
                            CategoriaId = 6,
                            Nombre = "Categoría"
                        });
                });

            modelBuilder.Entity("AutoGuia.Core.Entities.Taller", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("CalificacionPromedio")
                        .HasColumnType("numeric");

                    b.Property<string>("Ciudad")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("CodigoPostal")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<string>("Email")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<bool>("EsActivo")
                        .HasColumnType("boolean");

                    b.Property<bool>("EsVerificado")
                        .HasColumnType("boolean");

                    b.Property<string>("Especialidades")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime>("FechaRegistro")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("FechaVerificacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("HorarioAtencion")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<double?>("Latitud")
                        .HasColumnType("double precision");

                    b.Property<double?>("Longitud")
                        .HasColumnType("double precision");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ServiciosOfrecidos")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("SitioWeb")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<string>("Telefono")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int>("TotalResenas")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Talleres");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CalificacionPromedio = 4.5m,
                            Ciudad = "",
                            Direccion = "Av. San Miguel 1234, Santiago",
                            Email = "contacto@tallersanmiguel.cl",
                            EsActivo = true,
                            EsVerificado = false,
                            Especialidades = "Mecánica general, Frenos, Suspensión",
                            FechaRegistro = new DateTime(2025, 10, 23, 19, 57, 32, 244, DateTimeKind.Utc).AddTicks(6661),
                            HorarioAtencion = "Lunes a Viernes: 8:00 - 18:00, Sábados: 8:00 - 14:00",
                            Nombre = "Taller Mecánico San Miguel",
                            Region = "",
                            Telefono = "+56912345678",
                            TotalResenas = 0
                        },
                        new
                        {
                            Id = 2,
                            CalificacionPromedio = 4.2m,
                            Ciudad = "",
                            Direccion = "Las Condes 5678, Las Condes",
                            Email = "info@autoserviceexpress.cl",
                            EsActivo = true,
                            EsVerificado = false,
                            Especialidades = "Mantención preventiva, Cambio de aceite, Afinación",
                            FechaRegistro = new DateTime(2025, 10, 23, 19, 57, 32, 244, DateTimeKind.Utc).AddTicks(6671),
                            HorarioAtencion = "Lunes a Viernes: 7:30 - 19:00, Sábados: 8:00 - 15:00",
                            Nombre = "AutoServicio Express",
                            Region = "",
                            Telefono = "+56987654321",
                            TotalResenas = 0
                        });
                });

            modelBuilder.Entity("AutoGuia.Core.Entities.Tienda", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Descripcion")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Direccion")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Email")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<bool>("EsActivo")
                        .HasColumnType("boolean");

                    b.Property<bool>("EsConfiable")
                        .HasColumnType("boolean");

                    b.Property<bool>("EsVerificada")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("FechaActualizacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LogoUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Telefono")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("UrlSitioWeb")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("Id");

                    b.ToTable("Tiendas");
                });

            modelBuilder.Entity("AutoGuia.Core.Entities.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AnosExperiencia")
                        .HasColumnType("integer");

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Biografia")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<bool>("EsActivo")
                        .HasColumnType("boolean");

                    b.Property<string>("EspecialidadAutomotriz")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("FechaRegistro")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Telefono")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("AutoGuia.Core.Entities.ValorFiltro", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("SubcategoriaId")
                        .HasColumnType("integer");

                    b.Property<string>("Valor")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("SubcategoriaId");

                    b.ToTable("ValoresFiltro");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            SubcategoriaId = 1,
                            Valor = "Motor"
                        },
                        new
                        {
                            Id = 2,
                            SubcategoriaId = 1,
                            Valor = "Transmisión"
                        },
                        new
                        {
                            Id = 3,
                            SubcategoriaId = 2,
                            Valor = "5W-30"
                        },
                        new
                        {
                            Id = 4,
                            SubcategoriaId = 2,
                            Valor = "10W-40"
                        },
                        new
                        {
                            Id = 5,
                            SubcategoriaId = 2,
                            Valor = "15W-40"
                        },
                        new
                        {
                            Id = 6,
                            SubcategoriaId = 3,
                            Valor = "Castrol"
                        },
                        new
                        {
                            Id = 7,
                            SubcategoriaId = 3,
                            Valor = "Mobil"
                        },
                        new
                        {
                            Id = 8,
                            SubcategoriaId = 4,
                            Valor = "Verano"
                        },
                        new
                        {
                            Id = 9,
                            SubcategoriaId = 4,
                            Valor = "Invierno"
                        },
                        new
                        {
                            Id = 10,
                            SubcategoriaId = 5,
                            Valor = "165/70R13"
                        },
                        new
                        {
                            Id = 11,
                            SubcategoriaId = 5,
                            Valor = "205/55R16"
                        },
                        new
                        {
                            Id = 12,
                            SubcategoriaId = 6,
                            Valor = "Michelin"
                        },
                        new
                        {
                            Id = 13,
                            SubcategoriaId = 6,
                            Valor = "Continental"
                        },
                        new
                        {
                            Id = 14,
                            SubcategoriaId = 7,
                            Valor = "400mm"
                        },
                        new
                        {
                            Id = 15,
                            SubcategoriaId = 7,
                            Valor = "450mm"
                        },
                        new
                        {
                            Id = 16,
                            SubcategoriaId = 7,
                            Valor = "500mm"
                        },
                        new
                        {
                            Id = 17,
                            SubcategoriaId = 8,
                            Valor = "Convencional"
                        },
                        new
                        {
                            Id = 18,
                            SubcategoriaId = 8,
                            Valor = "Aerodinámico"
                        },
                        new
                        {
                            Id = 19,
                            SubcategoriaId = 9,
                            Valor = "Bosch"
                        },
                        new
                        {
                            Id = 20,
                            SubcategoriaId = 9,
                            Valor = "TRICO"
                        },
                        new
                        {
                            Id = 21,
                            SubcategoriaId = 10,
                            Valor = "Motor"
                        },
                        new
                        {
                            Id = 22,
                            SubcategoriaId = 10,
                            Valor = "Aire"
                        },
                        new
                        {
                            Id = 23,
                            SubcategoriaId = 11,
                            Valor = "Fram"
                        },
                        new
                        {
                            Id = 24,
                            SubcategoriaId = 11,
                            Valor = "Bosch"
                        },
                        new
                        {
                            Id = 25,
                            SubcategoriaId = 12,
                            Valor = "Bluetooth"
                        },
                        new
                        {
                            Id = 26,
                            SubcategoriaId = 12,
                            Valor = "Android Auto"
                        },
                        new
                        {
                            Id = 27,
                            SubcategoriaId = 13,
                            Valor = "Pioneer"
                        },
                        new
                        {
                            Id = 28,
                            SubcategoriaId = 13,
                            Valor = "Sony"
                        },
                        new
                        {
                            Id = 29,
                            SubcategoriaId = 14,
                            Valor = "Limpieza"
                        },
                        new
                        {
                            Id = 30,
                            SubcategoriaId = 14,
                            Valor = "Protección"
                        },
                        new
                        {
                            Id = 31,
                            SubcategoriaId = 15,
                            Valor = "Ceras"
                        },
                        new
                        {
                            Id = 32,
                            SubcategoriaId = 15,
                            Valor = "Cubre volante"
                        });
                });

            modelBuilder.Entity("AutoGuia.Core.Entities.Vehiculo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Ano")
                        .HasColumnType("integer");

                    b.Property<string>("Color")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<bool>("EsActivo")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("Kilometraje")
                        .HasColumnType("integer");

                    b.Property<string>("Marca")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Modelo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Patente")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("TipoCombustible")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("TipoMotor")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Transmision")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("integer");

                    b.Property<string>("Version")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Vehiculos");
                });

            modelBuilder.Entity("AutoGuia.Core.Entities.CausaPosible", b =>
                {
                    b.HasOne("AutoGuia.Core.Entities.Sintoma", "Sintoma")
                        .WithMany("CausasPosibles")
                        .HasForeignKey("SintomaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sintoma");
                });

            modelBuilder.Entity("AutoGuia.Core.Entities.ConsultaDiagnostico", b =>
                {
                    b.HasOne("AutoGuia.Core.Entities.Sintoma", "SintomaRelacionado")
                        .WithMany()
                        .HasForeignKey("SintomaRelacionadoId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("AutoGuia.Core.Entities.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SintomaRelacionado");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("AutoGuia.Core.Entities.Modelo", b =>
                {
                    b.HasOne("AutoGuia.Core.Entities.Marca", "Marca")
                        .WithMany("Modelos")
                        .HasForeignKey("MarcaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Marca");
                });

            modelBuilder.Entity("AutoGuia.Core.Entities.Oferta", b =>
                {
                    b.HasOne("AutoGuia.Core.Entities.Producto", "Producto")
                        .WithMany("Ofertas")
                        .HasForeignKey("ProductoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AutoGuia.Core.Entities.Tienda", "Tienda")
                        .WithMany("Ofertas")
                        .HasForeignKey("TiendaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Producto");

                    b.Navigation("Tienda");
                });

            modelBuilder.Entity("AutoGuia.Core.Entities.PasoVerificacion", b =>
                {
                    b.HasOne("AutoGuia.Core.Entities.CausaPosible", "CausaPosible")
                        .WithMany("PasosVerificacion")
                        .HasForeignKey("CausaPosibleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CausaPosible");
                });

            modelBuilder.Entity("AutoGuia.Core.Entities.Producto", b =>
                {
                    b.HasOne("AutoGuia.Core.Entities.Categoria", "Categoria")
                        .WithMany()
                        .HasForeignKey("CategoriaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Categoria");
                });

            modelBuilder.Entity("AutoGuia.Core.Entities.ProductoVehiculoCompatible", b =>
                {
                    b.HasOne("AutoGuia.Core.Entities.Modelo", "Modelo")
                        .WithMany()
                        .HasForeignKey("ModeloId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AutoGuia.Core.Entities.Producto", "Producto")
                        .WithMany("VehiculosCompatibles")
                        .HasForeignKey("ProductoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Modelo");

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("AutoGuia.Core.Entities.PublicacionForo", b =>
                {
                    b.HasOne("AutoGuia.Core.Entities.Usuario", "Usuario")
                        .WithMany("PublicacionesForo")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("AutoGuia.Core.Entities.RecomendacionPreventiva", b =>
                {
                    b.HasOne("AutoGuia.Core.Entities.CausaPosible", "CausaPosible")
                        .WithMany("Recomendaciones")
                        .HasForeignKey("CausaPosibleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CausaPosible");
                });

            modelBuilder.Entity("AutoGuia.Core.Entities.Resena", b =>
                {
                    b.HasOne("AutoGuia.Core.Entities.Taller", "Taller")
                        .WithMany("Resenas")
                        .HasForeignKey("TallerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Taller");
                });

            modelBuilder.Entity("AutoGuia.Core.Entities.ResenasTaller", b =>
                {
                    b.HasOne("AutoGuia.Core.Entities.Taller", "Taller")
                        .WithMany()
                        .HasForeignKey("TallerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AutoGuia.Core.Entities.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Taller");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("AutoGuia.Core.Entities.RespuestaForo", b =>
                {
                    b.HasOne("AutoGuia.Core.Entities.PublicacionForo", "Publicacion")
                        .WithMany("Respuestas")
                        .HasForeignKey("PublicacionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AutoGuia.Core.Entities.RespuestaForo", "RespuestaPadre")
                        .WithMany("RespuestasHijas")
                        .HasForeignKey("RespuestaPadreId");

                    b.HasOne("AutoGuia.Core.Entities.Usuario", "Usuario")
                        .WithMany("RespuestasForo")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Publicacion");

                    b.Navigation("RespuestaPadre");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("AutoGuia.Core.Entities.Sintoma", b =>
                {
                    b.HasOne("AutoGuia.Core.Entities.SistemaAutomotriz", "SistemaAutomotriz")
                        .WithMany("Sintomas")
                        .HasForeignKey("SistemaAutomotrizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SistemaAutomotriz");
                });

            modelBuilder.Entity("AutoGuia.Core.Entities.Subcategoria", b =>
                {
                    b.HasOne("AutoGuia.Core.Entities.Categoria", "Categoria")
                        .WithMany("Subcategorias")
                        .HasForeignKey("CategoriaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Categoria");
                });

            modelBuilder.Entity("AutoGuia.Core.Entities.ValorFiltro", b =>
                {
                    b.HasOne("AutoGuia.Core.Entities.Subcategoria", "Subcategoria")
                        .WithMany("Valores")
                        .HasForeignKey("SubcategoriaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subcategoria");
                });

            modelBuilder.Entity("AutoGuia.Core.Entities.Vehiculo", b =>
                {
                    b.HasOne("AutoGuia.Core.Entities.Usuario", "Usuario")
                        .WithMany("Vehiculos")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("AutoGuia.Core.Entities.Categoria", b =>
                {
                    b.Navigation("Subcategorias");
                });

            modelBuilder.Entity("AutoGuia.Core.Entities.CausaPosible", b =>
                {
                    b.Navigation("PasosVerificacion");

                    b.Navigation("Recomendaciones");
                });

            modelBuilder.Entity("AutoGuia.Core.Entities.Marca", b =>
                {
                    b.Navigation("Modelos");
                });

            modelBuilder.Entity("AutoGuia.Core.Entities.Producto", b =>
                {
                    b.Navigation("Ofertas");

                    b.Navigation("VehiculosCompatibles");
                });

            modelBuilder.Entity("AutoGuia.Core.Entities.PublicacionForo", b =>
                {
                    b.Navigation("Respuestas");
                });

            modelBuilder.Entity("AutoGuia.Core.Entities.RespuestaForo", b =>
                {
                    b.Navigation("RespuestasHijas");
                });

            modelBuilder.Entity("AutoGuia.Core.Entities.Sintoma", b =>
                {
                    b.Navigation("CausasPosibles");
                });

            modelBuilder.Entity("AutoGuia.Core.Entities.SistemaAutomotriz", b =>
                {
                    b.Navigation("Sintomas");
                });

            modelBuilder.Entity("AutoGuia.Core.Entities.Subcategoria", b =>
                {
                    b.Navigation("Valores");
                });

            modelBuilder.Entity("AutoGuia.Core.Entities.Taller", b =>
                {
                    b.Navigation("Resenas");
                });

            modelBuilder.Entity("AutoGuia.Core.Entities.Tienda", b =>
                {
                    b.Navigation("Ofertas");
                });

            modelBuilder.Entity("AutoGuia.Core.Entities.Usuario", b =>
                {
                    b.Navigation("PublicacionesForo");

                    b.Navigation("RespuestasForo");

                    b.Navigation("Vehiculos");
                });
#pragma warning restore 612, 618
        }
    }
}
