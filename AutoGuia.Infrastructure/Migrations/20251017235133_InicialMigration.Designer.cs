// <auto-generated />
using System;
using AutoGuia.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AutoGuia.Infrastructure.Migrations
{
    [DbContext(typeof(AutoGuiaDbContext))]
    [Migration("20251017235133_InicialMigration")]
    partial class InicialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AutoGuia.Core.Entities.Marca", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Descripcion")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<bool>("EsActivo")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LogoUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Marcas");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EsActivo = true,
                            FechaCreacion = new DateTime(2025, 10, 17, 23, 51, 32, 944, DateTimeKind.Utc).AddTicks(671),
                            LogoUrl = "/images/marcas/toyota.png",
                            Nombre = "Toyota"
                        },
                        new
                        {
                            Id = 2,
                            EsActivo = true,
                            FechaCreacion = new DateTime(2025, 10, 17, 23, 51, 32, 944, DateTimeKind.Utc).AddTicks(675),
                            LogoUrl = "/images/marcas/honda.png",
                            Nombre = "Honda"
                        },
                        new
                        {
                            Id = 3,
                            EsActivo = true,
                            FechaCreacion = new DateTime(2025, 10, 17, 23, 51, 32, 944, DateTimeKind.Utc).AddTicks(676),
                            LogoUrl = "/images/marcas/nissan.png",
                            Nombre = "Nissan"
                        },
                        new
                        {
                            Id = 4,
                            EsActivo = true,
                            FechaCreacion = new DateTime(2025, 10, 17, 23, 51, 32, 944, DateTimeKind.Utc).AddTicks(677),
                            LogoUrl = "/images/marcas/chevrolet.png",
                            Nombre = "Chevrolet"
                        },
                        new
                        {
                            Id = 5,
                            EsActivo = true,
                            FechaCreacion = new DateTime(2025, 10, 17, 23, 51, 32, 944, DateTimeKind.Utc).AddTicks(678),
                            LogoUrl = "/images/marcas/ford.png",
                            Nombre = "Ford"
                        });
                });

            modelBuilder.Entity("AutoGuia.Core.Entities.Modelo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AnioFinProduccion")
                        .HasColumnType("integer");

                    b.Property<int?>("AnioInicioProduccion")
                        .HasColumnType("integer");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<bool>("EsActivo")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ImagenUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("MarcaId")
                        .HasColumnType("integer");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("MarcaId");

                    b.ToTable("Modelos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AnioFinProduccion = 2024,
                            AnioInicioProduccion = 2000,
                            EsActivo = true,
                            FechaCreacion = new DateTime(2025, 10, 17, 23, 51, 32, 944, DateTimeKind.Utc).AddTicks(820),
                            MarcaId = 1,
                            Nombre = "Corolla"
                        },
                        new
                        {
                            Id = 2,
                            AnioFinProduccion = 2024,
                            AnioInicioProduccion = 2005,
                            EsActivo = true,
                            FechaCreacion = new DateTime(2025, 10, 17, 23, 51, 32, 944, DateTimeKind.Utc).AddTicks(828),
                            MarcaId = 1,
                            Nombre = "Yaris"
                        },
                        new
                        {
                            Id = 3,
                            AnioFinProduccion = 2024,
                            AnioInicioProduccion = 2010,
                            EsActivo = true,
                            FechaCreacion = new DateTime(2025, 10, 17, 23, 51, 32, 944, DateTimeKind.Utc).AddTicks(830),
                            MarcaId = 1,
                            Nombre = "RAV4"
                        },
                        new
                        {
                            Id = 4,
                            AnioFinProduccion = 2024,
                            AnioInicioProduccion = 2000,
                            EsActivo = true,
                            FechaCreacion = new DateTime(2025, 10, 17, 23, 51, 32, 944, DateTimeKind.Utc).AddTicks(831),
                            MarcaId = 2,
                            Nombre = "Civic"
                        },
                        new
                        {
                            Id = 5,
                            AnioFinProduccion = 2024,
                            AnioInicioProduccion = 2008,
                            EsActivo = true,
                            FechaCreacion = new DateTime(2025, 10, 17, 23, 51, 32, 944, DateTimeKind.Utc).AddTicks(833),
                            MarcaId = 2,
                            Nombre = "Accord"
                        },
                        new
                        {
                            Id = 6,
                            AnioFinProduccion = 2024,
                            AnioInicioProduccion = 2012,
                            EsActivo = true,
                            FechaCreacion = new DateTime(2025, 10, 17, 23, 51, 32, 944, DateTimeKind.Utc).AddTicks(835),
                            MarcaId = 2,
                            Nombre = "CR-V"
                        },
                        new
                        {
                            Id = 7,
                            AnioFinProduccion = 2024,
                            AnioInicioProduccion = 2007,
                            EsActivo = true,
                            FechaCreacion = new DateTime(2025, 10, 17, 23, 51, 32, 944, DateTimeKind.Utc).AddTicks(836),
                            MarcaId = 3,
                            Nombre = "Sentra"
                        },
                        new
                        {
                            Id = 8,
                            AnioFinProduccion = 2024,
                            AnioInicioProduccion = 2012,
                            EsActivo = true,
                            FechaCreacion = new DateTime(2025, 10, 17, 23, 51, 32, 944, DateTimeKind.Utc).AddTicks(838),
                            MarcaId = 3,
                            Nombre = "Versa"
                        },
                        new
                        {
                            Id = 9,
                            AnioFinProduccion = 2024,
                            AnioInicioProduccion = 2014,
                            EsActivo = true,
                            FechaCreacion = new DateTime(2025, 10, 17, 23, 51, 32, 944, DateTimeKind.Utc).AddTicks(839),
                            MarcaId = 3,
                            Nombre = "X-Trail"
                        });
                });

            modelBuilder.Entity("AutoGuia.Core.Entities.Oferta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("EsActivo")
                        .HasColumnType("boolean");

                    b.Property<bool>("EsDisponible")
                        .HasColumnType("boolean");

                    b.Property<bool>("EsOferta")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("FechaActualizacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("Precio")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal?>("PrecioAnterior")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("ProductoId")
                        .HasColumnType("integer");

                    b.Property<string>("SKU")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("TiendaId")
                        .HasColumnType("integer");

                    b.Property<string>("UrlProductoEnTienda")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.HasKey("Id");

                    b.HasIndex("ProductoId");

                    b.HasIndex("TiendaId");

                    b.ToTable("Ofertas");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EsActivo = true,
                            EsDisponible = true,
                            EsOferta = true,
                            FechaActualizacion = new DateTime(2025, 10, 17, 23, 51, 32, 944, DateTimeKind.Utc).AddTicks(940),
                            FechaCreacion = new DateTime(2025, 10, 17, 23, 51, 32, 944, DateTimeKind.Utc).AddTicks(940),
                            Precio = 35000m,
                            PrecioAnterior = 42000m,
                            ProductoId = 1,
                            SKU = "BP-1234-RS",
                            TiendaId = 1,
                            UrlProductoEnTienda = "https://repuestossantiago.cl/productos/pastillas-freno-bp1234"
                        },
                        new
                        {
                            Id = 2,
                            EsActivo = true,
                            EsDisponible = true,
                            EsOferta = false,
                            FechaActualizacion = new DateTime(2025, 10, 17, 23, 51, 32, 944, DateTimeKind.Utc).AddTicks(950),
                            FechaCreacion = new DateTime(2025, 10, 17, 23, 51, 32, 944, DateTimeKind.Utc).AddTicks(950),
                            Precio = 38000m,
                            ProductoId = 1,
                            SKU = "BP-1234-AC",
                            TiendaId = 2,
                            UrlProductoEnTienda = "https://autoparteschile.cl/pastillas-bosch-bp1234"
                        },
                        new
                        {
                            Id = 3,
                            EsActivo = true,
                            EsDisponible = true,
                            EsOferta = false,
                            FechaActualizacion = new DateTime(2025, 10, 17, 23, 51, 32, 944, DateTimeKind.Utc).AddTicks(952),
                            FechaCreacion = new DateTime(2025, 10, 17, 23, 51, 32, 944, DateTimeKind.Utc).AddTicks(952),
                            Precio = 33000m,
                            ProductoId = 1,
                            SKU = "BP-1234-MR",
                            TiendaId = 3,
                            UrlProductoEnTienda = "https://megarepuestos.cl/frenos/pastillas-bp1234"
                        },
                        new
                        {
                            Id = 4,
                            EsActivo = true,
                            EsDisponible = true,
                            EsOferta = false,
                            FechaActualizacion = new DateTime(2025, 10, 17, 23, 51, 32, 944, DateTimeKind.Utc).AddTicks(955),
                            FechaCreacion = new DateTime(2025, 10, 17, 23, 51, 32, 944, DateTimeKind.Utc).AddTicks(955),
                            Precio = 8500m,
                            ProductoId = 2,
                            SKU = "FO-9012-RS",
                            TiendaId = 1,
                            UrlProductoEnTienda = "https://repuestossantiago.cl/productos/filtro-aceite-fo9012"
                        },
                        new
                        {
                            Id = 5,
                            EsActivo = true,
                            EsDisponible = true,
                            EsOferta = false,
                            FechaActualizacion = new DateTime(2025, 10, 17, 23, 51, 32, 944, DateTimeKind.Utc).AddTicks(957),
                            FechaCreacion = new DateTime(2025, 10, 17, 23, 51, 32, 944, DateTimeKind.Utc).AddTicks(957),
                            Precio = 9200m,
                            ProductoId = 2,
                            SKU = "FO-9012-AC",
                            TiendaId = 2,
                            UrlProductoEnTienda = "https://autoparteschile.cl/filtros/aceite-mann-fo9012"
                        },
                        new
                        {
                            Id = 6,
                            EsActivo = true,
                            EsDisponible = true,
                            EsOferta = false,
                            FechaActualizacion = new DateTime(2025, 10, 17, 23, 51, 32, 944, DateTimeKind.Utc).AddTicks(959),
                            FechaCreacion = new DateTime(2025, 10, 17, 23, 51, 32, 944, DateTimeKind.Utc).AddTicks(959),
                            Precio = 85000m,
                            ProductoId = 3,
                            SKU = "AD-7890-AC",
                            TiendaId = 2,
                            UrlProductoEnTienda = "https://autoparteschile.cl/suspension/amortiguador-monroe-ad7890"
                        },
                        new
                        {
                            Id = 7,
                            EsActivo = true,
                            EsDisponible = true,
                            EsOferta = false,
                            FechaActualizacion = new DateTime(2025, 10, 17, 23, 51, 32, 944, DateTimeKind.Utc).AddTicks(961),
                            FechaCreacion = new DateTime(2025, 10, 17, 23, 51, 32, 944, DateTimeKind.Utc).AddTicks(960),
                            Precio = 89000m,
                            ProductoId = 4,
                            SKU = "BT-9753-RS",
                            TiendaId = 1,
                            UrlProductoEnTienda = "https://repuestossantiago.cl/productos/bateria-bosch-bt9753"
                        },
                        new
                        {
                            Id = 8,
                            EsActivo = true,
                            EsDisponible = true,
                            EsOferta = true,
                            FechaActualizacion = new DateTime(2025, 10, 17, 23, 51, 32, 944, DateTimeKind.Utc).AddTicks(962),
                            FechaCreacion = new DateTime(2025, 10, 17, 23, 51, 32, 944, DateTimeKind.Utc).AddTicks(962),
                            Precio = 43500m,
                            PrecioAnterior = 48000m,
                            ProductoId = 5,
                            SKU = "AM-2468-MR",
                            TiendaId = 3,
                            UrlProductoEnTienda = "https://megarepuestos.cl/lubricantes/aceite-am2468"
                        });
                });

            modelBuilder.Entity("AutoGuia.Core.Entities.Producto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Descripcion")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<bool>("EsActivo")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ImagenUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("NumeroDeParte")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Productos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Descripcion = "Pastillas de freno cerámicas para mayor durabilidad y menor ruido",
                            EsActivo = true,
                            FechaCreacion = new DateTime(2025, 10, 17, 23, 51, 32, 944, DateTimeKind.Utc).AddTicks(905),
                            ImagenUrl = "/images/productos/pastillas-freno-bosch.jpg",
                            Nombre = "Pastillas de Freno Delanteras",
                            NumeroDeParte = "BP-1234"
                        },
                        new
                        {
                            Id = 2,
                            Descripcion = "Filtro de aceite de alta calidad para motor",
                            EsActivo = true,
                            FechaCreacion = new DateTime(2025, 10, 17, 23, 51, 32, 944, DateTimeKind.Utc).AddTicks(910),
                            ImagenUrl = "/images/productos/filtro-aceite-mann.jpg",
                            Nombre = "Filtro de Aceite",
                            NumeroDeParte = "FO-9012"
                        },
                        new
                        {
                            Id = 3,
                            Descripcion = "Amortiguador de gas presurizado para mejor confort y control",
                            EsActivo = true,
                            FechaCreacion = new DateTime(2025, 10, 17, 23, 51, 32, 944, DateTimeKind.Utc).AddTicks(911),
                            ImagenUrl = "/images/productos/amortiguador-monroe.jpg",
                            Nombre = "Amortiguador Delantero",
                            NumeroDeParte = "AD-7890"
                        },
                        new
                        {
                            Id = 4,
                            Descripcion = "Batería de arranque libre de mantenimiento",
                            EsActivo = true,
                            FechaCreacion = new DateTime(2025, 10, 17, 23, 51, 32, 944, DateTimeKind.Utc).AddTicks(913),
                            ImagenUrl = "/images/productos/bateria-bosch.jpg",
                            Nombre = "Batería 12V 65Ah",
                            NumeroDeParte = "BT-9753"
                        },
                        new
                        {
                            Id = 5,
                            Descripcion = "Aceite sintético premium para motores de alta performance",
                            EsActivo = true,
                            FechaCreacion = new DateTime(2025, 10, 17, 23, 51, 32, 944, DateTimeKind.Utc).AddTicks(915),
                            ImagenUrl = "/images/productos/aceite-castrol.jpg",
                            Nombre = "Aceite Motor 5W-30 Sintético",
                            NumeroDeParte = "AM-2468"
                        });
                });

            modelBuilder.Entity("AutoGuia.Core.Entities.ProductoVehiculoCompatible", b =>
                {
                    b.Property<int>("ProductoId")
                        .HasColumnType("integer");

                    b.Property<int>("ModeloId")
                        .HasColumnType("integer");

                    b.Property<int>("Ano")
                        .HasColumnType("integer");

                    b.Property<bool>("EsActivo")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("ModeloId1")
                        .HasColumnType("integer");

                    b.Property<string>("NotasCompatibilidad")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("ProductoId", "ModeloId");

                    b.HasIndex("ModeloId");

                    b.HasIndex("ModeloId1");

                    b.ToTable("ProductoVehiculoCompatibles");

                    b.HasData(
                        new
                        {
                            ProductoId = 1,
                            ModeloId = 1,
                            Ano = 0,
                            EsActivo = true,
                            FechaCreacion = new DateTime(2025, 10, 17, 23, 51, 32, 944, DateTimeKind.Utc).AddTicks(992)
                        },
                        new
                        {
                            ProductoId = 1,
                            ModeloId = 2,
                            Ano = 0,
                            EsActivo = true,
                            FechaCreacion = new DateTime(2025, 10, 17, 23, 51, 32, 944, DateTimeKind.Utc).AddTicks(994)
                        },
                        new
                        {
                            ProductoId = 2,
                            ModeloId = 1,
                            Ano = 0,
                            EsActivo = true,
                            FechaCreacion = new DateTime(2025, 10, 17, 23, 51, 32, 944, DateTimeKind.Utc).AddTicks(995)
                        },
                        new
                        {
                            ProductoId = 2,
                            ModeloId = 2,
                            Ano = 0,
                            EsActivo = true,
                            FechaCreacion = new DateTime(2025, 10, 17, 23, 51, 32, 944, DateTimeKind.Utc).AddTicks(996)
                        },
                        new
                        {
                            ProductoId = 2,
                            ModeloId = 4,
                            Ano = 0,
                            EsActivo = true,
                            FechaCreacion = new DateTime(2025, 10, 17, 23, 51, 32, 944, DateTimeKind.Utc).AddTicks(997)
                        },
                        new
                        {
                            ProductoId = 3,
                            ModeloId = 7,
                            Ano = 0,
                            EsActivo = true,
                            FechaCreacion = new DateTime(2025, 10, 17, 23, 51, 32, 944, DateTimeKind.Utc).AddTicks(998)
                        },
                        new
                        {
                            ProductoId = 3,
                            ModeloId = 8,
                            Ano = 0,
                            EsActivo = true,
                            FechaCreacion = new DateTime(2025, 10, 17, 23, 51, 32, 944, DateTimeKind.Utc).AddTicks(999)
                        },
                        new
                        {
                            ProductoId = 4,
                            ModeloId = 1,
                            Ano = 0,
                            EsActivo = true,
                            FechaCreacion = new DateTime(2025, 10, 17, 23, 51, 32, 944, DateTimeKind.Utc).AddTicks(1000)
                        },
                        new
                        {
                            ProductoId = 4,
                            ModeloId = 2,
                            Ano = 0,
                            EsActivo = true,
                            FechaCreacion = new DateTime(2025, 10, 17, 23, 51, 32, 944, DateTimeKind.Utc).AddTicks(1001)
                        },
                        new
                        {
                            ProductoId = 4,
                            ModeloId = 4,
                            Ano = 0,
                            EsActivo = true,
                            FechaCreacion = new DateTime(2025, 10, 17, 23, 51, 32, 944, DateTimeKind.Utc).AddTicks(1002)
                        },
                        new
                        {
                            ProductoId = 4,
                            ModeloId = 5,
                            Ano = 0,
                            EsActivo = true,
                            FechaCreacion = new DateTime(2025, 10, 17, 23, 51, 32, 944, DateTimeKind.Utc).AddTicks(1002)
                        },
                        new
                        {
                            ProductoId = 4,
                            ModeloId = 7,
                            Ano = 0,
                            EsActivo = true,
                            FechaCreacion = new DateTime(2025, 10, 17, 23, 51, 32, 944, DateTimeKind.Utc).AddTicks(1003)
                        },
                        new
                        {
                            ProductoId = 5,
                            ModeloId = 1,
                            Ano = 0,
                            EsActivo = true,
                            FechaCreacion = new DateTime(2025, 10, 17, 23, 51, 32, 944, DateTimeKind.Utc).AddTicks(1004)
                        },
                        new
                        {
                            ProductoId = 5,
                            ModeloId = 4,
                            Ano = 0,
                            EsActivo = true,
                            FechaCreacion = new DateTime(2025, 10, 17, 23, 51, 32, 944, DateTimeKind.Utc).AddTicks(1005)
                        },
                        new
                        {
                            ProductoId = 5,
                            ModeloId = 5,
                            Ano = 0,
                            EsActivo = true,
                            FechaCreacion = new DateTime(2025, 10, 17, 23, 51, 32, 944, DateTimeKind.Utc).AddTicks(1006)
                        },
                        new
                        {
                            ProductoId = 5,
                            ModeloId = 7,
                            Ano = 0,
                            EsActivo = true,
                            FechaCreacion = new DateTime(2025, 10, 17, 23, 51, 32, 944, DateTimeKind.Utc).AddTicks(1006)
                        });
                });

            modelBuilder.Entity("AutoGuia.Core.Entities.PublicacionForo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Categoria")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Contenido")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("character varying(5000)");

                    b.Property<bool>("EsActivo")
                        .HasColumnType("boolean");

                    b.Property<bool>("EsCerrado")
                        .HasColumnType("boolean");

                    b.Property<bool>("EsDestacado")
                        .HasColumnType("boolean");

                    b.Property<string>("Etiquetas")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime?>("FechaActualizacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Likes")
                        .HasColumnType("integer");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("integer");

                    b.Property<int>("Vistas")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("PublicacionesForo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Categoria = "Mantenimiento",
                            Contenido = "Hola comunidad, tengo un Toyota Corolla 2018 y me gustaría saber cada cuántos kilómetros debo cambiar el aceite. He escuchado diferentes opiniones.",
                            EsActivo = true,
                            EsCerrado = false,
                            EsDestacado = false,
                            FechaCreacion = new DateTime(2025, 10, 12, 23, 51, 32, 944, DateTimeKind.Utc).AddTicks(1139),
                            Likes = 0,
                            Titulo = "¿Cada cuánto cambiar el aceite del motor?",
                            UsuarioId = 1,
                            Vistas = 0
                        },
                        new
                        {
                            Id = 2,
                            Categoria = "Problemas Técnicos",
                            Contenido = "Mi auto hace un ruido chirriante cuando freno. ¿Será necesario cambiar las pastillas de freno? ¿Algún taller recomendado en Santiago?",
                            EsActivo = true,
                            EsCerrado = false,
                            EsDestacado = false,
                            FechaCreacion = new DateTime(2025, 10, 14, 23, 51, 32, 944, DateTimeKind.Utc).AddTicks(1148),
                            Likes = 0,
                            Titulo = "Ruido extraño en los frenos",
                            UsuarioId = 2,
                            Vistas = 0
                        });
                });

            modelBuilder.Entity("AutoGuia.Core.Entities.Resena", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Calificacion")
                        .HasColumnType("integer");

                    b.Property<string>("Comentario")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime>("FechaPublicacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NombreUsuario")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TallerId")
                        .HasColumnType("integer");

                    b.Property<string>("UsuarioId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("TallerId");

                    b.ToTable("Resena");
                });

            modelBuilder.Entity("AutoGuia.Core.Entities.ResenasTaller", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Calificacion")
                        .HasColumnType("integer");

                    b.Property<string>("Comentario")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<bool>("EsActivo")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("TallerId")
                        .HasColumnType("integer");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TallerId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("ResenasTaller");
                });

            modelBuilder.Entity("AutoGuia.Core.Entities.RespuestaForo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Contenido")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<bool>("EsActivo")
                        .HasColumnType("boolean");

                    b.Property<bool>("EsRespuestaAceptada")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("FechaActualizacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Likes")
                        .HasColumnType("integer");

                    b.Property<int>("PublicacionId")
                        .HasColumnType("integer");

                    b.Property<int?>("RespuestaPadreId")
                        .HasColumnType("integer");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PublicacionId");

                    b.HasIndex("RespuestaPadreId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("RespuestasForo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Contenido = "Para un Corolla 2018, te recomiendo cambiar el aceite cada 10,000 km si usas aceite sintético, o cada 5,000 km con aceite convencional.",
                            EsActivo = true,
                            EsRespuestaAceptada = false,
                            FechaCreacion = new DateTime(2025, 10, 13, 23, 51, 32, 944, DateTimeKind.Utc).AddTicks(1170),
                            Likes = 0,
                            PublicacionId = 1,
                            UsuarioId = 3
                        },
                        new
                        {
                            Id = 2,
                            Contenido = "Ese ruido indica que las pastillas están gastadas. Te recomiendo el Taller San Miguel, son muy buenos con los frenos.",
                            EsActivo = true,
                            EsRespuestaAceptada = false,
                            FechaCreacion = new DateTime(2025, 10, 15, 23, 51, 32, 944, DateTimeKind.Utc).AddTicks(1172),
                            Likes = 0,
                            PublicacionId = 2,
                            UsuarioId = 4
                        });
                });

            modelBuilder.Entity("AutoGuia.Core.Entities.Taller", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("CalificacionPromedio")
                        .HasColumnType("numeric");

                    b.Property<string>("Ciudad")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("CodigoPostal")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<string>("Email")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<bool>("EsActivo")
                        .HasColumnType("boolean");

                    b.Property<bool>("EsVerificado")
                        .HasColumnType("boolean");

                    b.Property<string>("Especialidades")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime>("FechaRegistro")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("FechaVerificacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("HorarioAtencion")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<double?>("Latitud")
                        .HasColumnType("double precision");

                    b.Property<double?>("Longitud")
                        .HasColumnType("double precision");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ServiciosOfrecidos")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("SitioWeb")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<string>("Telefono")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int>("TotalResenas")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Talleres");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CalificacionPromedio = 4.5m,
                            Ciudad = "",
                            Direccion = "Av. San Miguel 1234, Santiago",
                            Email = "contacto@tallersanmiguel.cl",
                            EsActivo = true,
                            EsVerificado = false,
                            Especialidades = "Mecánica general, Frenos, Suspensión",
                            FechaRegistro = new DateTime(2025, 10, 17, 23, 51, 32, 944, DateTimeKind.Utc).AddTicks(1093),
                            HorarioAtencion = "Lunes a Viernes: 8:00 - 18:00, Sábados: 8:00 - 14:00",
                            Nombre = "Taller Mecánico San Miguel",
                            Region = "",
                            Telefono = "+56912345678",
                            TotalResenas = 0
                        },
                        new
                        {
                            Id = 2,
                            CalificacionPromedio = 4.2m,
                            Ciudad = "",
                            Direccion = "Las Condes 5678, Las Condes",
                            Email = "info@autoserviceexpress.cl",
                            EsActivo = true,
                            EsVerificado = false,
                            Especialidades = "Mantención preventiva, Cambio de aceite, Afinación",
                            FechaRegistro = new DateTime(2025, 10, 17, 23, 51, 32, 944, DateTimeKind.Utc).AddTicks(1103),
                            HorarioAtencion = "Lunes a Viernes: 7:30 - 19:00, Sábados: 8:00 - 15:00",
                            Nombre = "AutoServicio Express",
                            Region = "",
                            Telefono = "+56987654321",
                            TotalResenas = 0
                        });
                });

            modelBuilder.Entity("AutoGuia.Core.Entities.Tienda", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Descripcion")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<bool>("EsActivo")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LogoUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("UrlSitioWeb")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("Id");

                    b.ToTable("Tiendas");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Descripcion = "Tu tienda de confianza para repuestos automotrices",
                            EsActivo = true,
                            FechaCreacion = new DateTime(2025, 10, 17, 23, 51, 32, 944, DateTimeKind.Utc).AddTicks(874),
                            LogoUrl = "/images/tiendas/repuestos-santiago.png",
                            Nombre = "Repuestos Santiago",
                            UrlSitioWeb = "https://repuestossantiago.cl"
                        },
                        new
                        {
                            Id = 2,
                            Descripcion = "Especialistas en repuestos importados y nacionales",
                            EsActivo = true,
                            FechaCreacion = new DateTime(2025, 10, 17, 23, 51, 32, 944, DateTimeKind.Utc).AddTicks(878),
                            LogoUrl = "/images/tiendas/autopartes-chile.png",
                            Nombre = "AutoPartes Chile",
                            UrlSitioWeb = "https://autoparteschile.cl"
                        },
                        new
                        {
                            Id = 3,
                            Descripcion = "Los mejores precios en repuestos automotrices",
                            EsActivo = true,
                            FechaCreacion = new DateTime(2025, 10, 17, 23, 51, 32, 944, DateTimeKind.Utc).AddTicks(880),
                            LogoUrl = "/images/tiendas/mega-repuestos.png",
                            Nombre = "MegaRepuestos",
                            UrlSitioWeb = "https://megarepuestos.cl"
                        });
                });

            modelBuilder.Entity("AutoGuia.Core.Entities.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AnosExperiencia")
                        .HasColumnType("integer");

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Biografia")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<bool>("EsActivo")
                        .HasColumnType("boolean");

                    b.Property<string>("EspecialidadAutomotriz")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("FechaRegistro")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Telefono")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("AutoGuia.Core.Entities.Vehiculo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Ano")
                        .HasColumnType("integer");

                    b.Property<string>("Color")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<bool>("EsActivo")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("Kilometraje")
                        .HasColumnType("integer");

                    b.Property<string>("Marca")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Modelo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Patente")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("TipoCombustible")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("TipoMotor")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Transmision")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("integer");

                    b.Property<string>("Version")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Vehiculos");
                });

            modelBuilder.Entity("AutoGuia.Core.Entities.Modelo", b =>
                {
                    b.HasOne("AutoGuia.Core.Entities.Marca", "Marca")
                        .WithMany("Modelos")
                        .HasForeignKey("MarcaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Marca");
                });

            modelBuilder.Entity("AutoGuia.Core.Entities.Oferta", b =>
                {
                    b.HasOne("AutoGuia.Core.Entities.Producto", "Producto")
                        .WithMany("Ofertas")
                        .HasForeignKey("ProductoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AutoGuia.Core.Entities.Tienda", "Tienda")
                        .WithMany("Ofertas")
                        .HasForeignKey("TiendaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Producto");

                    b.Navigation("Tienda");
                });

            modelBuilder.Entity("AutoGuia.Core.Entities.ProductoVehiculoCompatible", b =>
                {
                    b.HasOne("AutoGuia.Core.Entities.Modelo", "Modelo")
                        .WithMany()
                        .HasForeignKey("ModeloId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AutoGuia.Core.Entities.Modelo", null)
                        .WithMany("ProductosCompatibles")
                        .HasForeignKey("ModeloId1");

                    b.HasOne("AutoGuia.Core.Entities.Producto", "Producto")
                        .WithMany("VehiculosCompatibles")
                        .HasForeignKey("ProductoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Modelo");

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("AutoGuia.Core.Entities.PublicacionForo", b =>
                {
                    b.HasOne("AutoGuia.Core.Entities.Usuario", "Usuario")
                        .WithMany("PublicacionesForo")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("AutoGuia.Core.Entities.Resena", b =>
                {
                    b.HasOne("AutoGuia.Core.Entities.Taller", "Taller")
                        .WithMany("Resenas")
                        .HasForeignKey("TallerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Taller");
                });

            modelBuilder.Entity("AutoGuia.Core.Entities.ResenasTaller", b =>
                {
                    b.HasOne("AutoGuia.Core.Entities.Taller", "Taller")
                        .WithMany()
                        .HasForeignKey("TallerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AutoGuia.Core.Entities.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Taller");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("AutoGuia.Core.Entities.RespuestaForo", b =>
                {
                    b.HasOne("AutoGuia.Core.Entities.PublicacionForo", "Publicacion")
                        .WithMany("Respuestas")
                        .HasForeignKey("PublicacionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AutoGuia.Core.Entities.RespuestaForo", "RespuestaPadre")
                        .WithMany("RespuestasHijas")
                        .HasForeignKey("RespuestaPadreId");

                    b.HasOne("AutoGuia.Core.Entities.Usuario", "Usuario")
                        .WithMany("RespuestasForo")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Publicacion");

                    b.Navigation("RespuestaPadre");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("AutoGuia.Core.Entities.Vehiculo", b =>
                {
                    b.HasOne("AutoGuia.Core.Entities.Usuario", "Usuario")
                        .WithMany("Vehiculos")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("AutoGuia.Core.Entities.Marca", b =>
                {
                    b.Navigation("Modelos");
                });

            modelBuilder.Entity("AutoGuia.Core.Entities.Modelo", b =>
                {
                    b.Navigation("ProductosCompatibles");
                });

            modelBuilder.Entity("AutoGuia.Core.Entities.Producto", b =>
                {
                    b.Navigation("Ofertas");

                    b.Navigation("VehiculosCompatibles");
                });

            modelBuilder.Entity("AutoGuia.Core.Entities.PublicacionForo", b =>
                {
                    b.Navigation("Respuestas");
                });

            modelBuilder.Entity("AutoGuia.Core.Entities.RespuestaForo", b =>
                {
                    b.Navigation("RespuestasHijas");
                });

            modelBuilder.Entity("AutoGuia.Core.Entities.Taller", b =>
                {
                    b.Navigation("Resenas");
                });

            modelBuilder.Entity("AutoGuia.Core.Entities.Tienda", b =>
                {
                    b.Navigation("Ofertas");
                });

            modelBuilder.Entity("AutoGuia.Core.Entities.Usuario", b =>
                {
                    b.Navigation("PublicacionesForo");

                    b.Navigation("RespuestasForo");

                    b.Navigation("Vehiculos");
                });
#pragma warning restore 612, 618
        }
    }
}
